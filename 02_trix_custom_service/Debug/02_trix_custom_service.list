
02_trix_custom_service.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005204  08005204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d0  080053d0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  20000088  08005460  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  08005460  00020810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e30  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c76  00000000  00000000  00036ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  0003abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019946  00000000  00000000  0003bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015855  00000000  00000000  00055486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ffa  00000000  00000000  0006acdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fccd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  000fcd28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051ec 	.word	0x080051ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080051ec 	.word	0x080051ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8000598:	2006      	movs	r0, #6
 800059a:	f001 f824 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 80005a6:	2006      	movs	r0, #6
 80005a8:	f001 f82b 	bl	8001602 <HAL_NVIC_DisableIRQ>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <HCI_TL_SPI_Init+0x90>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <HCI_TL_SPI_Init+0x90>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6313      	str	r3, [r2, #48]	; 0x30
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <HCI_TL_SPI_Init+0x90>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005d4:	2301      	movs	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4619      	mov	r1, r3
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <HCI_TL_SPI_Init+0x94>)
 80005ea:	f001 f877 	bl	80016dc <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <HCI_TL_SPI_Init+0x94>)
 8000608:	f001 f868 	bl	80016dc <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <HCI_TL_SPI_Init+0x94>)
 8000624:	f001 f85a 	bl	80016dc <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <HCI_TL_SPI_Init+0x94>)
 800062e:	f001 fad5 	bl	8001bdc <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000632:	f000 fc4b 	bl	8000ecc <BSP_SPI1_Init>
 8000636:	4603      	mov	r3, r0
}
 8000638:	4618      	mov	r0, r3
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800064c:	2101      	movs	r1, #1
 800064e:	4807      	ldr	r0, [pc, #28]	; (800066c <HCI_TL_SPI_DeInit+0x24>)
 8000650:	f001 f9c8 	bl	80019e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000654:	2102      	movs	r1, #2
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <HCI_TL_SPI_DeInit+0x24>)
 8000658:	f001 f9c4 	bl	80019e4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800065c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000660:	4802      	ldr	r0, [pc, #8]	; (800066c <HCI_TL_SPI_DeInit+0x24>)
 8000662:	f001 f9bf 	bl	80019e4 <HAL_GPIO_DeInit>
  return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40020000 	.word	0x40020000

08000670 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2102      	movs	r1, #2
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <HCI_TL_SPI_Reset+0x38>)
 800067a:	f001 faaf 	bl	8001bdc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <HCI_TL_SPI_Reset+0x38>)
 8000686:	f001 faa9 	bl	8001bdc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800068a:	2005      	movs	r0, #5
 800068c:	f000 fe6c 	bl	8001368 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <HCI_TL_SPI_Reset+0x38>)
 8000698:	f001 faa0 	bl	8001bdc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800069c:	2005      	movs	r0, #5
 800069e:	f000 fe63 	bl	8001368 <HAL_Delay>
  return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020000 	.word	0x40020000

080006ac <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006bc:	2300      	movs	r3, #0
 80006be:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006c0:	4a30      	ldr	r2, [pc, #192]	; (8000784 <HCI_TL_SPI_Receive+0xd8>)
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006d0:	f7ff ff67 	bl	80005a2 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2102      	movs	r1, #2
 80006d8:	482b      	ldr	r0, [pc, #172]	; (8000788 <HCI_TL_SPI_Receive+0xdc>)
 80006da:	f001 fa7f 	bl	8001bdc <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006de:	f107 0108 	add.w	r1, r7, #8
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2205      	movs	r2, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fc1f 	bl	8000f2c <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006ee:	7b3b      	ldrb	r3, [r7, #12]
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	b21b      	sxth	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006fe:	8bfb      	ldrh	r3, [r7, #30]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d01e      	beq.n	8000742 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 8000704:	8bfa      	ldrh	r2, [r7, #30]
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	429a      	cmp	r2, r3
 800070a:	d901      	bls.n	8000710 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 800070c:	887b      	ldrh	r3, [r7, #2]
 800070e:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000710:	2300      	movs	r3, #0
 8000712:	777b      	strb	r3, [r7, #29]
 8000714:	e010      	b.n	8000738 <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 8000716:	f107 0116 	add.w	r1, r7, #22
 800071a:	f107 0317 	add.w	r3, r7, #23
 800071e:	2201      	movs	r2, #1
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fc03 	bl	8000f2c <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 8000726:	7f7b      	ldrb	r3, [r7, #29]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	7dba      	ldrb	r2, [r7, #22]
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000732:	7f7b      	ldrb	r3, [r7, #29]
 8000734:	3301      	adds	r3, #1
 8000736:	777b      	strb	r3, [r7, #29]
 8000738:	7f7b      	ldrb	r3, [r7, #29]
 800073a:	b29b      	uxth	r3, r3
 800073c:	8bfa      	ldrh	r2, [r7, #30]
 800073e:	429a      	cmp	r2, r3
 8000740:	d8e9      	bhi.n	8000716 <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000742:	f000 fe05 	bl	8001350 <HAL_GetTick>
 8000746:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000748:	e006      	b.n	8000758 <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800074a:	2101      	movs	r1, #1
 800074c:	480e      	ldr	r0, [pc, #56]	; (8000788 <HCI_TL_SPI_Receive+0xdc>)
 800074e:	f001 fa2d 	bl	8001bac <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d008      	beq.n	800076a <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000758:	f000 fdfa 	bl	8001350 <HAL_GetTick>
 800075c:	4602      	mov	r2, r0
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000766:	d3f0      	bcc.n	800074a <HCI_TL_SPI_Receive+0x9e>
 8000768:	e000      	b.n	800076c <HCI_TL_SPI_Receive+0xc0>
      break;
 800076a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800076c:	f7ff ff12 	bl	8000594 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2102      	movs	r1, #2
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <HCI_TL_SPI_Receive+0xdc>)
 8000776:	f001 fa31 	bl	8001bdc <HAL_GPIO_WritePin>

  return len;
 800077a:	7f7b      	ldrb	r3, [r7, #29]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08005204 	.word	0x08005204
 8000788:	40020000 	.word	0x40020000

0800078c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000798:	4a3f      	ldr	r2, [pc, #252]	; (8000898 <HCI_TL_SPI_Send+0x10c>)
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a2:	6018      	str	r0, [r3, #0]
 80007a4:	3304      	adds	r3, #4
 80007a6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f000 fdd2 	bl	8001350 <HAL_GetTick>
 80007ac:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80007ae:	f7ff fef8 	bl	80005a2 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80007b2:	f000 fdcd 	bl	8001350 <HAL_GetTick>
 80007b6:	61f8      	str	r0, [r7, #28]

    result = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	4836      	ldr	r0, [pc, #216]	; (800089c <HCI_TL_SPI_Send+0x110>)
 80007c2:	f001 fa0b 	bl	8001bdc <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80007c6:	e00a      	b.n	80007de <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80007c8:	f000 fdc2 	bl	8001350 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	2b64      	cmp	r3, #100	; 0x64
 80007d4:	d903      	bls.n	80007de <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80007d6:	f06f 0302 	mvn.w	r3, #2
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80007dc:	e004      	b.n	80007e8 <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007de:	f000 f861 	bl	80008a4 <IsDataAvailable>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0ef      	beq.n	80007c8 <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	f113 0f03 	cmn.w	r3, #3
 80007ee:	d105      	bne.n	80007fc <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2102      	movs	r1, #2
 80007f4:	4829      	ldr	r0, [pc, #164]	; (800089c <HCI_TL_SPI_Send+0x110>)
 80007f6:	f001 f9f1 	bl	8001bdc <HAL_GPIO_WritePin>
      break;
 80007fa:	e030      	b.n	800085e <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007fc:	f107 010c 	add.w	r1, r7, #12
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2205      	movs	r2, #5
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fb90 	bl	8000f2c <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800080c:	7bbb      	ldrb	r3, [r7, #14]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b21a      	sxth	r2, r3
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800081c:	8b7a      	ldrh	r2, [r7, #26]
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	429a      	cmp	r2, r3
 8000822:	d306      	bcc.n	8000832 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	461a      	mov	r2, r3
 8000828:	491d      	ldr	r1, [pc, #116]	; (80008a0 <HCI_TL_SPI_Send+0x114>)
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 fb7e 	bl	8000f2c <BSP_SPI1_SendRecv>
 8000830:	e002      	b.n	8000838 <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000832:	f06f 0301 	mvn.w	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2102      	movs	r1, #2
 800083c:	4817      	ldr	r0, [pc, #92]	; (800089c <HCI_TL_SPI_Send+0x110>)
 800083e:	f001 f9cd 	bl	8001bdc <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000842:	f000 fd85 	bl	8001350 <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	2b64      	cmp	r3, #100	; 0x64
 800084e:	d903      	bls.n	8000858 <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000850:	f06f 0302 	mvn.w	r3, #2
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000856:	e002      	b.n	800085e <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	2b00      	cmp	r3, #0
 800085c:	dba9      	blt.n	80007b2 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 800085e:	f000 fd77 	bl	8001350 <HAL_GetTick>
 8000862:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000864:	e006      	b.n	8000874 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8000866:	2101      	movs	r1, #1
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <HCI_TL_SPI_Send+0x110>)
 800086a:	f001 f99f 	bl	8001bac <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d008      	beq.n	8000886 <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000874:	f000 fd6c 	bl	8001350 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000882:	d3f0      	bcc.n	8000866 <HCI_TL_SPI_Send+0xda>
 8000884:	e000      	b.n	8000888 <HCI_TL_SPI_Send+0xfc>
      break;
 8000886:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000888:	f7ff fe84 	bl	8000594 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800088e:	4618      	mov	r0, r3
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	0800520c 	.word	0x0800520c
 800089c:	40020000 	.word	0x40020000
 80008a0:	200000ac 	.word	0x200000ac

080008a4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80008a8:	2101      	movs	r1, #1
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <IsDataAvailable+0x1c>)
 80008ac:	f001 f97e 	bl	8001bac <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	bf0c      	ite	eq
 80008b6:	2301      	moveq	r3, #1
 80008b8:	2300      	movne	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40020000 	.word	0x40020000

080008c4 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <hci_tl_lowlevel_init+0x54>)
 80008cc:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <hci_tl_lowlevel_init+0x58>)
 80008d0:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <hci_tl_lowlevel_init+0x5c>)
 80008d4:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <hci_tl_lowlevel_init+0x60>)
 80008d8:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <hci_tl_lowlevel_init+0x64>)
 80008dc:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <hci_tl_lowlevel_init+0x68>)
 80008e0:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 fa15 	bl	8003d14 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80008ea:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <hci_tl_lowlevel_init+0x6c>)
 80008f0:	f000 febb 	bl	800166a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <hci_tl_lowlevel_init+0x70>)
 80008f6:	2100      	movs	r1, #0
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <hci_tl_lowlevel_init+0x6c>)
 80008fa:	f000 fe9c 	bl	8001636 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2006      	movs	r0, #6
 8000904:	f000 fe53 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000908:	2006      	movs	r0, #6
 800090a:	f000 fe6c 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	080005b1 	.word	0x080005b1
 800091c:	08000649 	.word	0x08000649
 8000920:	0800078d 	.word	0x0800078d
 8000924:	080006ad 	.word	0x080006ad
 8000928:	08000671 	.word	0x08000671
 800092c:	08000f6d 	.word	0x08000f6d
 8000930:	200000a4 	.word	0x200000a4
 8000934:	08000939 	.word	0x08000939

08000938 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 800093c:	e005      	b.n	800094a <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800093e:	2000      	movs	r0, #0
 8000940:	f003 fb22 	bl	8003f88 <hci_notify_asynch_evt>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d105      	bne.n	8000956 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800094a:	f7ff ffab 	bl	80008a4 <IsDataAvailable>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f4      	bne.n	800093e <hci_tl_lowlevel_isr+0x6>
 8000954:	e000      	b.n	8000958 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000956:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <bluenrg_init>:
#define BDADDR_SIZE                    6

uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};

void bluenrg_init(void)
{
 800095c:	b5b0      	push	{r4, r5, r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af02      	add	r7, sp, #8
	tBleStatus ret;
	uint8_t bdaddr[BDADDR_SIZE];
	const char *name = "Ibn";
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <bluenrg_init+0xd4>)
 8000964:	617b      	str	r3, [r7, #20]
	uint16_t service_handle, device_name_characteristics_handle, appearance_characteristics_handle;

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000966:	4a33      	ldr	r2, [pc, #204]	; (8000a34 <bluenrg_init+0xd8>)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000970:	6018      	str	r0, [r3, #0]
 8000972:	3304      	adds	r3, #4
 8000974:	8019      	strh	r1, [r3, #0]

	/* Initialise HCI */
	hci_init(NULL, NULL);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f003 f989 	bl	8003c90 <hci_init>

	/* Reset HCI */
	hci_reset();
 800097e:	f002 fcd3 	bl	8003328 <hci_reset>

	/* Wait a bit */
	HAL_Delay(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fcf0 	bl	8001368 <HAL_Delay>

	/* Configure device address */
	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	461a      	mov	r2, r3
 800098e:	2106      	movs	r1, #6
 8000990:	2000      	movs	r0, #0
 8000992:	f003 f854 	bl	8003a3e <aci_hal_write_config_data>
 8000996:	4603      	mov	r3, r0
 8000998:	74fb      	strb	r3, [r7, #19]

	if (ret != BLE_STATUS_SUCCESS)
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <bluenrg_init+0x4a>
		printf("aci_hal_write_config_data(): failed! \n\r");
 80009a0:	4825      	ldr	r0, [pc, #148]	; (8000a38 <bluenrg_init+0xdc>)
 80009a2:	f003 fc95 	bl	80042d0 <iprintf>

	/* Initialise GATT server */
	ret = aci_gatt_init();
 80009a6:	f002 fe98 	bl	80036da <aci_gatt_init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	74fb      	strb	r3, [r7, #19]

	if (ret != BLE_STATUS_SUCCESS)
 80009ae:	7cfb      	ldrb	r3, [r7, #19]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <bluenrg_init+0x5e>
		printf("aci_gatt_init(): failed! \n\r");
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <bluenrg_init+0xe0>)
 80009b6:	f003 fc8b 	bl	80042d0 <iprintf>

	/* Initialise GAP service */
	ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle,
 80009ba:	f107 020a 	add.w	r2, r7, #10
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4613      	mov	r3, r2
 80009ca:	2207      	movs	r2, #7
 80009cc:	2100      	movs	r1, #0
 80009ce:	2001      	movs	r0, #1
 80009d0:	f002 fdd6 	bl	8003580 <aci_gap_init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	74fb      	strb	r3, [r7, #19]
						&device_name_characteristics_handle, &appearance_characteristics_handle);

	if (ret != BLE_STATUS_SUCCESS)
 80009d8:	7cfb      	ldrb	r3, [r7, #19]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <bluenrg_init+0x88>
		printf("aci_gap_init(): failed! \n\r");
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <bluenrg_init+0xe4>)
 80009e0:	f003 fc76 	bl	80042d0 <iprintf>

	/* Update characteristics */
	ret = aci_gatt_update_char_value(service_handle, device_name_characteristics_handle, 0,
 80009e4:	897c      	ldrh	r4, [r7, #10]
 80009e6:	893d      	ldrh	r5, [r7, #8]
						strlen(name), (uint8_t *)name);
 80009e8:	6978      	ldr	r0, [r7, #20]
 80009ea:	f7ff fbf9 	bl	80001e0 <strlen>
 80009ee:	4603      	mov	r3, r0
	ret = aci_gatt_update_char_value(service_handle, device_name_characteristics_handle, 0,
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	4613      	mov	r3, r2
 80009f8:	2200      	movs	r2, #0
 80009fa:	4629      	mov	r1, r5
 80009fc:	4620      	mov	r0, r4
 80009fe:	f002 ff6c 	bl	80038da <aci_gatt_update_char_value>
 8000a02:	4603      	mov	r3, r0
 8000a04:	74fb      	strb	r3, [r7, #19]

	if (ret != BLE_STATUS_SUCCESS)
 8000a06:	7cfb      	ldrb	r3, [r7, #19]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <bluenrg_init+0xb6>
		printf("aci_gatt_update_char_value(): failed! \n\r");
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <bluenrg_init+0xe8>)
 8000a0e:	f003 fc5f 	bl	80042d0 <iprintf>

	/* Add custom service */
	ret = add_simple_service();
 8000a12:	f000 f993 	bl	8000d3c <add_simple_service>
 8000a16:	4603      	mov	r3, r0
 8000a18:	74fb      	strb	r3, [r7, #19]

	if (ret != BLE_STATUS_SUCCESS)
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <bluenrg_init+0xca>
		printf("add_simple_service(): failed! \n\r");
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <bluenrg_init+0xec>)
 8000a22:	f003 fc55 	bl	80042d0 <iprintf>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	08005214 	.word	0x08005214
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08005218 	.word	0x08005218
 8000a3c:	08005240 	.word	0x08005240
 8000a40:	0800525c 	.word	0x0800525c
 8000a44:	08005278 	.word	0x08005278
 8000a48:	080052a4 	.word	0x080052a4

08000a4c <bluenrg_process>:

void bluenrg_process(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af08      	add	r7, sp, #32
	tBleStatus ret;
	uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME, 'B', 'L', 'E', '-', 'G','-','U','P'};
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <bluenrg_process+0x50>)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a58:	c303      	stmia	r3!, {r0, r1}
 8000a5a:	701a      	strb	r2, [r3, #0]

	/* Set device in General Discoverable mode */
	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE,
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9306      	str	r3, [sp, #24]
 8000a60:	2300      	movs	r3, #0
 8000a62:	9305      	str	r3, [sp, #20]
 8000a64:	2300      	movs	r3, #0
 8000a66:	9304      	str	r3, [sp, #16]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9303      	str	r3, [sp, #12]
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2309      	movs	r3, #9
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2300      	movs	r3, #0
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f002 fc7b 	bl	800337a <aci_gap_set_discoverable>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
						sizeof(local_name), local_name, 0, NULL, 0, 0);

	if (ret != BLE_STATUS_SUCCESS)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <bluenrg_process+0x48>
		printf("aci_gap_set_discoverable failed! \n\r");
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <bluenrg_process+0x54>)
 8000a90:	f003 fc1e 	bl	80042d0 <iprintf>

}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	080052ec 	.word	0x080052ec
 8000aa0:	080052c8 	.word	0x080052c8

08000aa4 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);

int __io_putchar(int ch)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, ((uint8_t *)&ch), 1, 10);
 8000aac:	1d39      	adds	r1, r7, #4
 8000aae:	230a      	movs	r3, #10
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <__io_putchar+0x20>)
 8000ab4:	f002 f8c3 	bl	8002c3e <HAL_UART_Transmit>
	return ch;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001ac 	.word	0x200001ac

08000ac8 <main>:

int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  HAL_Init();
 8000acc:	f000 fbda 	bl	8001284 <HAL_Init>

  SystemClock_Config();
 8000ad0:	f000 f80e 	bl	8000af0 <SystemClock_Config>

  MX_GPIO_Init();
 8000ad4:	f000 f89e 	bl	8000c14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad8:	f000 f872 	bl	8000bc0 <MX_USART2_UART_Init>


  // 1. Enable BLE module
  bluenrg_init();
 8000adc:	f7ff ff3e 	bl	800095c <bluenrg_init>

  printf("Initialisation successful...\n\r");
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <main+0x24>)
 8000ae2:	f003 fbf5 	bl	80042d0 <iprintf>

  while (1)
  {
  	// 2. Process BLE
  	bluenrg_process();
 8000ae6:	f7ff ffb1 	bl	8000a4c <bluenrg_process>
 8000aea:	e7fc      	b.n	8000ae6 <main+0x1e>
 8000aec:	080052f8 	.word	0x080052f8

08000af0 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 fbde 	bl	80042c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2310      	movs	r3, #16
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b60:	2308      	movs	r3, #8
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b64:	2340      	movs	r3, #64	; 0x40
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 f86f 	bl	8001c58 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b80:	f000 f8d6 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fad1 	bl	8002148 <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bac:	f000 f8c0 	bl	8000d30 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_USART2_UART_Init+0x50>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USART2_UART_Init+0x4c>)
 8000bf8:	f001 ffd4 	bl	8002ba4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c02:	f000 f895 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200001ac 	.word	0x200001ac
 8000c10:	40004400 	.word	0x40004400

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b36      	ldr	r3, [pc, #216]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a35      	ldr	r2, [pc, #212]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b33      	ldr	r3, [pc, #204]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_GPIO_Init+0x110>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000ca0:	4821      	ldr	r0, [pc, #132]	; (8000d28 <MX_GPIO_Init+0x114>)
 8000ca2:	f000 ff9b 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481b      	ldr	r0, [pc, #108]	; (8000d2c <MX_GPIO_Init+0x118>)
 8000cbe:	f000 fd0d 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <MX_GPIO_Init+0x114>)
 8000cd8:	f000 fd00 	bl	80016dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000cdc:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x114>)
 8000cf6:	f000 fcf1 	bl	80016dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2006      	movs	r0, #6
 8000d00:	f000 fc55 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d04:	2006      	movs	r0, #6
 8000d06:	f000 fc6e 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2028      	movs	r0, #40	; 0x28
 8000d10:	f000 fc4d 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d14:	2028      	movs	r0, #40	; 0x28
 8000d16:	f000 fc66 	bl	80015e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	40020800 	.word	0x40020800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <add_simple_service>:
uint8_t SERVICE_UUID[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};

uint16_t my_service_handle;

tBleStatus add_simple_service(void)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af02      	add	r7, sp, #8
	tBleStatus ret;
	Service_UUID_t service_uuid;

	BLUENRG_memcpy(service_uuid.Service_UUID_128, SERVICE_UUID, 16);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <add_simple_service+0x30>)
 8000d44:	1d3c      	adds	r4, r7, #4
 8000d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Add service
	ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &my_service_handle);
 8000d4c:	1d39      	adds	r1, r7, #4
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <add_simple_service+0x34>)
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	2307      	movs	r3, #7
 8000d54:	2201      	movs	r2, #1
 8000d56:	2002      	movs	r0, #2
 8000d58:	f002 fce9 	bl	800372e <aci_gatt_add_service>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	75fb      	strb	r3, [r7, #23]

	return ret;
 8000d60:	7dfb      	ldrb	r3, [r7, #23]

}
 8000d62:	4618      	mov	r0, r3
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd90      	pop	{r4, r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200001f0 	.word	0x200001f0

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fbf0 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12b      	bne.n	8000e3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1e:	230c      	movs	r3, #12
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0x8c>)
 8000e3a:	f000 fc4f 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40004400 	.word	0x40004400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 fa42 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <EXTI0_IRQHandler+0x10>)
 8000eae:	f000 fbf1 	bl	8001694 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000a4 	.word	0x200000a4

08000ebc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ec0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ec4:	f000 fea4 	bl	8001c10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <BSP_SPI1_Init+0x54>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <BSP_SPI1_Init+0x58>)
 8000eda:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <BSP_SPI1_Init+0x5c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	4911      	ldr	r1, [pc, #68]	; (8000f28 <BSP_SPI1_Init+0x5c>)
 8000ee4:	600a      	str	r2, [r1, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d114      	bne.n	8000f14 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <BSP_SPI1_Init+0x54>)
 8000eec:	f001 fd81 	bl	80029f2 <HAL_SPI_GetState>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10e      	bne.n	8000f14 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <BSP_SPI1_Init+0x54>)
 8000ef8:	f000 f87c 	bl	8000ff4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d108      	bne.n	8000f14 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <BSP_SPI1_Init+0x54>)
 8000f04:	f000 f83a 	bl	8000f7c <MX_SPI1_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000f0e:	f06f 0307 	mvn.w	r3, #7
 8000f12:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001f4 	.word	0x200001f4
 8000f24:	40013000 	.word	0x40013000
 8000f28:	2000024c 	.word	0x2000024c

08000f2c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f44:	9200      	str	r2, [sp, #0]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	68f9      	ldr	r1, [r7, #12]
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <BSP_SPI1_SendRecv+0x3c>)
 8000f4c:	f001 fbaf 	bl	80026ae <HAL_SPI_TransmitReceive>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000f56:	f06f 0305 	mvn.w	r3, #5
 8000f5a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000f5c:	697b      	ldr	r3, [r7, #20]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200001f4 	.word	0x200001f4

08000f6c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000f70:	f000 f9ee 	bl	8001350 <HAL_GetTick>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <MX_SPI1_Init+0x74>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f94:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2228      	movs	r2, #40	; 0x28
 8000fba:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f001 fad7 	bl	8002588 <HAL_SPI_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <SPI1_MspInit+0xc4>)
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <SPI1_MspInit+0xc4>)
 8001006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100a:	6453      	str	r3, [r2, #68]	; 0x44
 800100c:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <SPI1_MspInit+0xc4>)
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <SPI1_MspInit+0xc4>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <SPI1_MspInit+0xc4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SPI1_MspInit+0xc4>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SPI1_MspInit+0xc4>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <SPI1_MspInit+0xc4>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <SPI1_MspInit+0xc4>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001060:	2305      	movs	r3, #5
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4814      	ldr	r0, [pc, #80]	; (80010bc <SPI1_MspInit+0xc8>)
 800106c:	f000 fb36 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001080:	2305      	movs	r3, #5
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <SPI1_MspInit+0xc8>)
 800108c:	f000 fb26 	bl	80016dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001090:	2308      	movs	r3, #8
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80010a0:	2305      	movs	r3, #5
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <SPI1_MspInit+0xcc>)
 80010ac:	f000 fb16 	bl	80016dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400

080010c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
  }

  return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fcc3 	bl	8000aa4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
  }
  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f003 f83e 	bl	8004250 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20020000 	.word	0x20020000
 8001200:	00000400 	.word	0x00000400
 8001204:	20000250 	.word	0x20000250
 8001208:	20000810 	.word	0x20000810

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f002 fffd 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fc31 	bl	8000ac8 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001274:	080053d8 	.word	0x080053d8
  ldr r2, =_sbss
 8001278:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800127c:	20000810 	.word	0x20000810

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f973 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fd5c 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f999 	bl	800161e <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001304:	f000 f953 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000018 	.word	0x20000018
 8001320:	20000020 	.word	0x20000020
 8001324:	2000001c 	.word	0x2000001c

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000020 	.word	0x20000020
 800134c:	20000254 	.word	0x20000254

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000254 	.word	0x20000254

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001380:	d005      	beq.n	800138e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_Delay+0x44>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138e:	bf00      	nop
 8001390:	f7ff ffde 	bl	8001350 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	429a      	cmp	r2, r3
 800139e:	d8f7      	bhi.n	8001390 <HAL_Delay+0x28>
  {
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000020 	.word	0x20000020

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <__NVIC_EnableIRQ+0x38>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000e100 	.word	0xe000e100

08001450 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	2b00      	cmp	r3, #0
 8001460:	db12      	blt.n	8001488 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 021f 	and.w	r2, r3, #31
 8001468:	490a      	ldr	r1, [pc, #40]	; (8001494 <__NVIC_DisableIRQ+0x44>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	095b      	lsrs	r3, r3, #5
 8001470:	2001      	movs	r0, #1
 8001472:	fa00 f202 	lsl.w	r2, r0, r2
 8001476:	3320      	adds	r3, #32
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800147c:	f3bf 8f4f 	dsb	sy
}
 8001480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001482:	f3bf 8f6f 	isb	sy
}
 8001486:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff05 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff1a 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff0d 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff1d 	bl	8001450 <__NVIC_DisableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff94 	bl	8001554 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001636:	b480      	push	{r7}
 8001638:	b087      	sub	sp, #28
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	460b      	mov	r3, r1
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001648:	7afb      	ldrb	r3, [r7, #11]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	605a      	str	r2, [r3, #4]
      break;
 8001654:	e002      	b.n	800165c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
      break;
 800165a:	bf00      	nop
  }

  return status;
 800165c:	7dfb      	ldrb	r3, [r7, #23]
}
 800165e:	4618      	mov	r0, r3
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e003      	b.n	8001686 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001684:	2300      	movs	r3, #0
  }
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	2201      	movs	r2, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_EXTI_IRQHandler+0x44>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d009      	beq.n	80016d0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_EXTI_IRQHandler+0x44>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4798      	blx	r3
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e159      	b.n	80019ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8148 	bne.w	80019a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d005      	beq.n	800172e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172a:	2b02      	cmp	r3, #2
 800172c:	d130      	bne.n	8001790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	69b9      	ldr	r1, [r7, #24]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a2 	beq.w	80019a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800187e:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a49      	ldr	r2, [pc, #292]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d019      	beq.n	80018de <HAL_GPIO_Init+0x202>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a48      	ldr	r2, [pc, #288]	; (80019d0 <HAL_GPIO_Init+0x2f4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0x1fe>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a47      	ldr	r2, [pc, #284]	; (80019d4 <HAL_GPIO_Init+0x2f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00d      	beq.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <HAL_GPIO_Init+0x2fc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d007      	beq.n	80018d2 <HAL_GPIO_Init+0x1f6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a45      	ldr	r2, [pc, #276]	; (80019dc <HAL_GPIO_Init+0x300>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d101      	bne.n	80018ce <HAL_GPIO_Init+0x1f2>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e008      	b.n	80018e0 <HAL_GPIO_Init+0x204>
 80018ce:	2307      	movs	r3, #7
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x204>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e004      	b.n	80018e0 <HAL_GPIO_Init+0x204>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x204>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x204>
 80018de:	2300      	movs	r3, #0
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f002 0203 	and.w	r2, r2, #3
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	4093      	lsls	r3, r2
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f0:	4935      	ldr	r1, [pc, #212]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018fe:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <HAL_GPIO_Init+0x304>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001922:	4a2f      	ldr	r2, [pc, #188]	; (80019e0 <HAL_GPIO_Init+0x304>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001928:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <HAL_GPIO_Init+0x304>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <HAL_GPIO_Init+0x304>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x304>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_GPIO_Init+0x304>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_GPIO_Init+0x304>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a0:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_GPIO_Init+0x304>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b0f      	cmp	r3, #15
 80019b0:	f67f aea2 	bls.w	80016f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e0bb      	b.n	8001b78 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a00:	2201      	movs	r2, #1
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	f040 80ab 	bne.w	8001b72 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a1c:	4a5c      	ldr	r2, [pc, #368]	; (8001b90 <HAL_GPIO_DeInit+0x1ac>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	220f      	movs	r2, #15
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_GPIO_DeInit+0x1b0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_DeInit+0x96>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_GPIO_DeInit+0x1b4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_DeInit+0x92>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_DeInit+0x1b8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_DeInit+0x8e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_DeInit+0x1bc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_DeInit+0x8a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_GPIO_DeInit+0x1c0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_DeInit+0x86>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_DeInit+0x98>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_DeInit+0x98>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_DeInit+0x98>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_DeInit+0x98>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_DeInit+0x98>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d132      	bne.n	8001af2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4944      	ldr	r1, [pc, #272]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a9a:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	4941      	ldr	r1, [pc, #260]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	493d      	ldr	r1, [pc, #244]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ab6:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	493a      	ldr	r1, [pc, #232]	; (8001ba8 <HAL_GPIO_DeInit+0x1c4>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ad4:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_GPIO_DeInit+0x1ac>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	482a      	ldr	r0, [pc, #168]	; (8001b90 <HAL_GPIO_DeInit+0x1ac>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	400a      	ands	r2, r1
 8001aec:	3302      	adds	r3, #2
 8001aee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2103      	movs	r1, #3
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	08d2      	lsrs	r2, r2, #3
 8001b28:	4019      	ands	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2103      	movs	r1, #3
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f af40 	bls.w	8001a00 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e001      	b.n	8001bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f806 	bl	8001c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e267      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d075      	beq.n	8001d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c76:	4b88      	ldr	r3, [pc, #544]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d00c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c82:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d112      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4b82      	ldr	r3, [pc, #520]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	4b7e      	ldr	r3, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05b      	beq.n	8001d60 <HAL_RCC_OscConfig+0x108>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d157      	bne.n	8001d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e242      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d106      	bne.n	8001ccc <HAL_RCC_OscConfig+0x74>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x98>
 8001cd6:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a6f      	ldr	r2, [pc, #444]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xb0>
 8001cf0:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a68      	ldr	r2, [pc, #416]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a65      	ldr	r2, [pc, #404]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fb1e 	bl	8001350 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fb1a 	bl	8001350 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e207      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xc0>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb0a 	bl	8001350 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fb06 	bl	8001350 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e1f3      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b51      	ldr	r3, [pc, #324]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0xe8>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d063      	beq.n	8001e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b41      	ldr	r3, [pc, #260]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x152>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1c7      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4937      	ldr	r1, [pc, #220]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e03a      	b.n	8001e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d020      	beq.n	8001e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_RCC_OscConfig+0x244>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fabf 	bl	8001350 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fabb 	bl	8001350 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1a8      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4925      	ldr	r1, [pc, #148]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_RCC_OscConfig+0x244>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fa9e 	bl	8001350 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e18:	f7ff fa9a 	bl	8001350 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e187      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d036      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_RCC_OscConfig+0x248>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa7e 	bl	8001350 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fa7a 	bl	8001350 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e167      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x200>
 8001e76:	e01b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_OscConfig+0x248>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fa67 	bl	8001350 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e00e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff fa63 	bl	8001350 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d907      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e150      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	42470000 	.word	0x42470000
 8001ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b88      	ldr	r3, [pc, #544]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1ea      	bne.n	8001e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8097 	beq.w	8001fec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b81      	ldr	r3, [pc, #516]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a7c      	ldr	r2, [pc, #496]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b77      	ldr	r3, [pc, #476]	; (80020cc <HAL_RCC_OscConfig+0x474>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b74      	ldr	r3, [pc, #464]	; (80020cc <HAL_RCC_OscConfig+0x474>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a73      	ldr	r2, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x474>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fa23 	bl	8001350 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff fa1f 	bl	8001350 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e10c      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_OscConfig+0x474>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2ea>
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a63      	ldr	r2, [pc, #396]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	e01c      	b.n	8001f7c <HAL_RCC_OscConfig+0x324>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b05      	cmp	r3, #5
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x30c>
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	6713      	str	r3, [r2, #112]	; 0x70
 8001f56:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	4a5b      	ldr	r2, [pc, #364]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6713      	str	r3, [r2, #112]	; 0x70
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0x324>
 8001f64:	4b58      	ldr	r3, [pc, #352]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	4b55      	ldr	r3, [pc, #340]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	4a54      	ldr	r2, [pc, #336]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001f76:	f023 0304 	bic.w	r3, r3, #4
 8001f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d015      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f9e4 	bl	8001350 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f9e0 	bl	8001350 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e0cb      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ee      	beq.n	8001f8c <HAL_RCC_OscConfig+0x334>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7ff f9ce 	bl	8001350 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f9ca 	bl	8001350 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0b5      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ee      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a1 	beq.w	8002138 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d05c      	beq.n	80020bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d141      	bne.n	800208e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_RCC_OscConfig+0x478>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff f99e 	bl	8001350 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7ff f99a 	bl	8001350 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e087      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	019b      	lsls	r3, r3, #6
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_OscConfig+0x478>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff f973 	bl	8001350 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206e:	f7ff f96f 	bl	8001350 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e05c      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x416>
 800208c:	e054      	b.n	8002138 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_OscConfig+0x478>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff f95c 	bl	8001350 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f958 	bl	8001350 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e045      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_OscConfig+0x470>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x444>
 80020ba:	e03d      	b.n	8002138 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e038      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4ec>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d028      	beq.n	8002134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d121      	bne.n	8002134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d11a      	bne.n	8002134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002104:	4013      	ands	r3, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800210c:	4293      	cmp	r3, r2
 800210e:	d111      	bne.n	8002134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0cc      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d90c      	bls.n	8002184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b8      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	494d      	ldr	r1, [pc, #308]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d044      	beq.n	8002268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d119      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e07f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	2b03      	cmp	r3, #3
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002206:	4b3f      	ldr	r3, [pc, #252]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e067      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b37      	ldr	r3, [pc, #220]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4934      	ldr	r1, [pc, #208]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff f88a 	bl	8001350 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f886 	bl	8001350 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e04f      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002268:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d20c      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e032      	b.n	80022f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b19      	ldr	r3, [pc, #100]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4916      	ldr	r1, [pc, #88]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490e      	ldr	r1, [pc, #56]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ce:	f000 f821 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	fa22 f303 	lsr.w	r3, r2, r3
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe ffea 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00
 8002304:	40023800 	.word	0x40023800
 8002308:	08005318 	.word	0x08005318
 800230c:	20000018 	.word	0x20000018
 8002310:	2000001c 	.word	0x2000001c

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002318:	b094      	sub	sp, #80	; 0x50
 800231a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	647b      	str	r3, [r7, #68]	; 0x44
 8002320:	2300      	movs	r3, #0
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002324:	2300      	movs	r3, #0
 8002326:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800232c:	4b79      	ldr	r3, [pc, #484]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b08      	cmp	r3, #8
 8002336:	d00d      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x40>
 8002338:	2b08      	cmp	r3, #8
 800233a:	f200 80e1 	bhi.w	8002500 <HAL_RCC_GetSysClockFreq+0x1ec>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x34>
 8002342:	2b04      	cmp	r3, #4
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x3a>
 8002346:	e0db      	b.n	8002500 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_GetSysClockFreq+0x204>)
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800234c:	e0db      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_GetSysClockFreq+0x208>)
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002352:	e0d8      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002354:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d063      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b6a      	ldr	r3, [pc, #424]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	2200      	movs	r2, #0
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
 8002374:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	; 0x34
 8002382:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002386:	4622      	mov	r2, r4
 8002388:	462b      	mov	r3, r5
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002398:	0150      	lsls	r0, r2, #5
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4621      	mov	r1, r4
 80023a0:	1a51      	subs	r1, r2, r1
 80023a2:	6139      	str	r1, [r7, #16]
 80023a4:	4629      	mov	r1, r5
 80023a6:	eb63 0301 	sbc.w	r3, r3, r1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b8:	4659      	mov	r1, fp
 80023ba:	018b      	lsls	r3, r1, #6
 80023bc:	4651      	mov	r1, sl
 80023be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023c2:	4651      	mov	r1, sl
 80023c4:	018a      	lsls	r2, r1, #6
 80023c6:	4651      	mov	r1, sl
 80023c8:	ebb2 0801 	subs.w	r8, r2, r1
 80023cc:	4659      	mov	r1, fp
 80023ce:	eb63 0901 	sbc.w	r9, r3, r1
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	eb18 0303 	adds.w	r3, r8, r3
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	462b      	mov	r3, r5
 80023f4:	eb49 0303 	adc.w	r3, r9, r3
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002406:	4629      	mov	r1, r5
 8002408:	024b      	lsls	r3, r1, #9
 800240a:	4621      	mov	r1, r4
 800240c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002410:	4621      	mov	r1, r4
 8002412:	024a      	lsls	r2, r1, #9
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241a:	2200      	movs	r2, #0
 800241c:	62bb      	str	r3, [r7, #40]	; 0x28
 800241e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002424:	f7fd ff34 	bl	8000290 <__aeabi_uldivmod>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4613      	mov	r3, r2
 800242e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002430:	e058      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	099b      	lsrs	r3, r3, #6
 8002438:	2200      	movs	r2, #0
 800243a:	4618      	mov	r0, r3
 800243c:	4611      	mov	r1, r2
 800243e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002442:	623b      	str	r3, [r7, #32]
 8002444:	2300      	movs	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800244c:	4642      	mov	r2, r8
 800244e:	464b      	mov	r3, r9
 8002450:	f04f 0000 	mov.w	r0, #0
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	0159      	lsls	r1, r3, #5
 800245a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245e:	0150      	lsls	r0, r2, #5
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4641      	mov	r1, r8
 8002466:	ebb2 0a01 	subs.w	sl, r2, r1
 800246a:	4649      	mov	r1, r9
 800246c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800247c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002480:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002484:	ebb2 040a 	subs.w	r4, r2, sl
 8002488:	eb63 050b 	sbc.w	r5, r3, fp
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	00eb      	lsls	r3, r5, #3
 8002496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800249a:	00e2      	lsls	r2, r4, #3
 800249c:	4614      	mov	r4, r2
 800249e:	461d      	mov	r5, r3
 80024a0:	4643      	mov	r3, r8
 80024a2:	18e3      	adds	r3, r4, r3
 80024a4:	603b      	str	r3, [r7, #0]
 80024a6:	464b      	mov	r3, r9
 80024a8:	eb45 0303 	adc.w	r3, r5, r3
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ba:	4629      	mov	r1, r5
 80024bc:	028b      	lsls	r3, r1, #10
 80024be:	4621      	mov	r1, r4
 80024c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c4:	4621      	mov	r1, r4
 80024c6:	028a      	lsls	r2, r1, #10
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ce:	2200      	movs	r2, #0
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	61fa      	str	r2, [r7, #28]
 80024d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d8:	f7fd feda 	bl	8000290 <__aeabi_uldivmod>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4613      	mov	r3, r2
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0c1b      	lsrs	r3, r3, #16
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	3301      	adds	r3, #1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetSysClockFreq+0x204>)
 8002502:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002508:	4618      	mov	r0, r3
 800250a:	3750      	adds	r7, #80	; 0x50
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000018 	.word	0x20000018

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0a9b      	lsrs	r3, r3, #10
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	08005328 	.word	0x08005328

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002564:	f7ff ffdc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0b5b      	lsrs	r3, r3, #13
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	08005328 	.word	0x08005328

08002588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07b      	b.n	8002692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f85d 	bl	800269a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	ea42 0103 	orr.w	r1, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0104 	and.w	r1, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0210 	and.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b08c      	sub	sp, #48	; 0x30
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026bc:	2301      	movs	r3, #1
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x26>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e18a      	b.n	80029ea <HAL_SPI_TransmitReceive+0x33c>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026dc:	f7fe fe38 	bl	8001350 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d00f      	beq.n	800271e <HAL_SPI_TransmitReceive+0x70>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002704:	d107      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x68>
 800270e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002716:	2302      	movs	r3, #2
 8002718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800271c:	e15b      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_SPI_TransmitReceive+0x82>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_TransmitReceive+0x82>
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002736:	e14e      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b04      	cmp	r3, #4
 8002742:	d003      	beq.n	800274c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2205      	movs	r2, #5
 8002748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	887a      	ldrh	r2, [r7, #2]
 800276e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	887a      	ldrh	r2, [r7, #2]
 8002774:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d007      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a8:	d178      	bne.n	800289c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x10a>
 80027b2:	8b7b      	ldrh	r3, [r7, #26]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d166      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	1c9a      	adds	r2, r3, #2
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027dc:	e053      	b.n	8002886 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d11b      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x176>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x176>
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d113      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	881a      	ldrh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	1c9a      	adds	r2, r3, #2
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d119      	bne.n	8002866 <HAL_SPI_TransmitReceive+0x1b8>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d014      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	b292      	uxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002862:	2301      	movs	r3, #1
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002866:	f7fe fd73 	bl	8001350 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002872:	429a      	cmp	r2, r3
 8002874:	d807      	bhi.n	8002886 <HAL_SPI_TransmitReceive+0x1d8>
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800287c:	d003      	beq.n	8002886 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002884:	e0a7      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1a6      	bne.n	80027de <HAL_SPI_TransmitReceive+0x130>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1a1      	bne.n	80027de <HAL_SPI_TransmitReceive+0x130>
 800289a:	e07c      	b.n	8002996 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x1fc>
 80028a4:	8b7b      	ldrh	r3, [r7, #26]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d16b      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d0:	e057      	b.n	8002982 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11c      	bne.n	800291a <HAL_SPI_TransmitReceive+0x26c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d017      	beq.n	800291a <HAL_SPI_TransmitReceive+0x26c>
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d114      	bne.n	800291a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	7812      	ldrb	r2, [r2, #0]
 80028fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d119      	bne.n	800295c <HAL_SPI_TransmitReceive+0x2ae>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d014      	beq.n	800295c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002958:	2301      	movs	r3, #1
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800295c:	f7fe fcf8 	bl	8001350 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002968:	429a      	cmp	r2, r3
 800296a:	d803      	bhi.n	8002974 <HAL_SPI_TransmitReceive+0x2c6>
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002972:	d102      	bne.n	800297a <HAL_SPI_TransmitReceive+0x2cc>
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002980:	e029      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1a2      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x224>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d19d      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f8c0 	bl	8002b20 <SPI_EndRxTxTransaction>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029b2:	e010      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	e000      	b.n	80029d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3730      	adds	r7, #48	; 0x30
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a00:	b2db      	uxtb	r3, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a20:	f7fe fc96 	bl	8001350 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a30:	f7fe fc8e 	bl	8001350 <HAL_GetTick>
 8002a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a36:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	0d1b      	lsrs	r3, r3, #20
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a46:	e054      	b.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4e:	d050      	beq.n	8002af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a50:	f7fe fc7e 	bl	8001350 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d902      	bls.n	8002a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13d      	bne.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7e:	d111      	bne.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a88:	d004      	beq.n	8002a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d107      	bne.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aac:	d10f      	bne.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e017      	b.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	bf0c      	ite	eq
 8002b02:	2301      	moveq	r3, #1
 8002b04:	2300      	movne	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d19b      	bne.n	8002a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000018 	.word	0x20000018

08002b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <SPI_EndRxTxTransaction+0x7c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	; (8002ba0 <SPI_EndRxTxTransaction+0x80>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0d5b      	lsrs	r3, r3, #21
 8002b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b4a:	d112      	bne.n	8002b72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ff5a 	bl	8002a10 <SPI_WaitFlagStateUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e00f      	b.n	8002b92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d0f2      	beq.n	8002b72 <SPI_EndRxTxTransaction+0x52>
 8002b8c:	e000      	b.n	8002b90 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b8e:	bf00      	nop
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000018 	.word	0x20000018
 8002ba0:	165e9f81 	.word	0x165e9f81

08002ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e03f      	b.n	8002c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe f8fa 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f929 	bl	8002e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b08a      	sub	sp, #40	; 0x28
 8002c42:	af02      	add	r7, sp, #8
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d17c      	bne.n	8002d58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_UART_Transmit+0x2c>
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e075      	b.n	8002d5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x3e>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e06e      	b.n	8002d5a <HAL_UART_Transmit+0x11c>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	; 0x21
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c92:	f7fe fb5d 	bl	8001350 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cac:	d108      	bne.n	8002cc0 <HAL_UART_Transmit+0x82>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d104      	bne.n	8002cc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	e003      	b.n	8002cc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cd0:	e02a      	b.n	8002d28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2180      	movs	r1, #128	; 0x80
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f840 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e036      	b.n	8002d5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3302      	adds	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	e007      	b.n	8002d1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1cf      	bne.n	8002cd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f810 	bl	8002d62 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e006      	b.n	8002d5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e000      	b.n	8002d5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
  }
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b090      	sub	sp, #64	; 0x40
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	e050      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d04c      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d82:	f7fe fae5 	bl	8001350 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d241      	bcs.n	8002e16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db2:	637a      	str	r2, [r7, #52]	; 0x34
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 0301 	bic.w	r3, r3, #1
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002de6:	623a      	str	r2, [r7, #32]
 8002de8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	69f9      	ldr	r1, [r7, #28]
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e5      	bne.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d09f      	beq.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3740      	adds	r7, #64	; 0x40
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b0c0      	sub	sp, #256	; 0x100
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	ea40 0301 	orr.w	r3, r0, r1
 8002e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e98:	f021 010c 	bic.w	r1, r1, #12
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eba:	6999      	ldr	r1, [r3, #24]
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	ea40 0301 	orr.w	r3, r0, r1
 8002ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b8f      	ldr	r3, [pc, #572]	; (800310c <UART_SetConfig+0x2cc>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <UART_SetConfig+0xa0>
 8002ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <UART_SetConfig+0x2d0>)
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d104      	bne.n	8002eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee0:	f7ff fb3e 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 8002ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ee8:	e003      	b.n	8002ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eea:	f7ff fb25 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8002eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efc:	f040 810c 	bne.w	8003118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	1891      	adds	r1, r2, r2
 8002f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f22:	4621      	mov	r1, r4
 8002f24:	eb12 0801 	adds.w	r8, r2, r1
 8002f28:	4629      	mov	r1, r5
 8002f2a:	eb43 0901 	adc.w	r9, r3, r1
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f42:	4690      	mov	r8, r2
 8002f44:	4699      	mov	r9, r3
 8002f46:	4623      	mov	r3, r4
 8002f48:	eb18 0303 	adds.w	r3, r8, r3
 8002f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f6e:	460b      	mov	r3, r1
 8002f70:	18db      	adds	r3, r3, r3
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
 8002f74:	4613      	mov	r3, r2
 8002f76:	eb42 0303 	adc.w	r3, r2, r3
 8002f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f84:	f7fd f984 	bl	8000290 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <UART_SetConfig+0x2d4>)
 8002f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	011c      	lsls	r4, r3, #4
 8002f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fa8:	4642      	mov	r2, r8
 8002faa:	464b      	mov	r3, r9
 8002fac:	1891      	adds	r1, r2, r2
 8002fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fb0:	415b      	adcs	r3, r3
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fb8:	4641      	mov	r1, r8
 8002fba:	eb12 0a01 	adds.w	sl, r2, r1
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd8:	4692      	mov	sl, r2
 8002fda:	469b      	mov	fp, r3
 8002fdc:	4643      	mov	r3, r8
 8002fde:	eb1a 0303 	adds.w	r3, sl, r3
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003004:	460b      	mov	r3, r1
 8003006:	18db      	adds	r3, r3, r3
 8003008:	643b      	str	r3, [r7, #64]	; 0x40
 800300a:	4613      	mov	r3, r2
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800301a:	f7fd f939 	bl	8000290 <__aeabi_uldivmod>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4611      	mov	r1, r2
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <UART_SetConfig+0x2d4>)
 8003026:	fba3 2301 	umull	r2, r3, r3, r1
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2264      	movs	r2, #100	; 0x64
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	1acb      	subs	r3, r1, r3
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <UART_SetConfig+0x2d4>)
 800303c:	fba3 2302 	umull	r2, r3, r3, r2
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003048:	441c      	add	r4, r3
 800304a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304e:	2200      	movs	r2, #0
 8003050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800305c:	4642      	mov	r2, r8
 800305e:	464b      	mov	r3, r9
 8003060:	1891      	adds	r1, r2, r2
 8003062:	63b9      	str	r1, [r7, #56]	; 0x38
 8003064:	415b      	adcs	r3, r3
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800306c:	4641      	mov	r1, r8
 800306e:	1851      	adds	r1, r2, r1
 8003070:	6339      	str	r1, [r7, #48]	; 0x30
 8003072:	4649      	mov	r1, r9
 8003074:	414b      	adcs	r3, r1
 8003076:	637b      	str	r3, [r7, #52]	; 0x34
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003084:	4659      	mov	r1, fp
 8003086:	00cb      	lsls	r3, r1, #3
 8003088:	4651      	mov	r1, sl
 800308a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800308e:	4651      	mov	r1, sl
 8003090:	00ca      	lsls	r2, r1, #3
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4642      	mov	r2, r8
 800309a:	189b      	adds	r3, r3, r2
 800309c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030c0:	460b      	mov	r3, r1
 80030c2:	18db      	adds	r3, r3, r3
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	4613      	mov	r3, r2
 80030c8:	eb42 0303 	adc.w	r3, r2, r3
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030d6:	f7fd f8db 	bl	8000290 <__aeabi_uldivmod>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <UART_SetConfig+0x2d4>)
 80030e0:	fba3 1302 	umull	r1, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	2164      	movs	r1, #100	; 0x64
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	3332      	adds	r3, #50	; 0x32
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <UART_SetConfig+0x2d4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	095b      	lsrs	r3, r3, #5
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4422      	add	r2, r4
 8003106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003108:	e105      	b.n	8003316 <UART_SetConfig+0x4d6>
 800310a:	bf00      	nop
 800310c:	40011000 	.word	0x40011000
 8003110:	40011400 	.word	0x40011400
 8003114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311c:	2200      	movs	r2, #0
 800311e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800312a:	4642      	mov	r2, r8
 800312c:	464b      	mov	r3, r9
 800312e:	1891      	adds	r1, r2, r2
 8003130:	6239      	str	r1, [r7, #32]
 8003132:	415b      	adcs	r3, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800313a:	4641      	mov	r1, r8
 800313c:	1854      	adds	r4, r2, r1
 800313e:	4649      	mov	r1, r9
 8003140:	eb43 0501 	adc.w	r5, r3, r1
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	00eb      	lsls	r3, r5, #3
 800314e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003152:	00e2      	lsls	r2, r4, #3
 8003154:	4614      	mov	r4, r2
 8003156:	461d      	mov	r5, r3
 8003158:	4643      	mov	r3, r8
 800315a:	18e3      	adds	r3, r4, r3
 800315c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003160:	464b      	mov	r3, r9
 8003162:	eb45 0303 	adc.w	r3, r5, r3
 8003166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003186:	4629      	mov	r1, r5
 8003188:	008b      	lsls	r3, r1, #2
 800318a:	4621      	mov	r1, r4
 800318c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003190:	4621      	mov	r1, r4
 8003192:	008a      	lsls	r2, r1, #2
 8003194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003198:	f7fd f87a 	bl	8000290 <__aeabi_uldivmod>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <UART_SetConfig+0x4e4>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	011c      	lsls	r4, r3, #4
 80031aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	1891      	adds	r1, r2, r2
 80031c2:	61b9      	str	r1, [r7, #24]
 80031c4:	415b      	adcs	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031cc:	4641      	mov	r1, r8
 80031ce:	1851      	adds	r1, r2, r1
 80031d0:	6139      	str	r1, [r7, #16]
 80031d2:	4649      	mov	r1, r9
 80031d4:	414b      	adcs	r3, r1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031e4:	4659      	mov	r1, fp
 80031e6:	00cb      	lsls	r3, r1, #3
 80031e8:	4651      	mov	r1, sl
 80031ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ee:	4651      	mov	r1, sl
 80031f0:	00ca      	lsls	r2, r1, #3
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	4642      	mov	r2, r8
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003200:	464b      	mov	r3, r9
 8003202:	460a      	mov	r2, r1
 8003204:	eb42 0303 	adc.w	r3, r2, r3
 8003208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	67bb      	str	r3, [r7, #120]	; 0x78
 8003216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003236:	f7fd f82b 	bl	8000290 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <UART_SetConfig+0x4e4>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <UART_SetConfig+0x4e4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800325e:	441c      	add	r4, r3
 8003260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003264:	2200      	movs	r2, #0
 8003266:	673b      	str	r3, [r7, #112]	; 0x70
 8003268:	677a      	str	r2, [r7, #116]	; 0x74
 800326a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800326e:	4642      	mov	r2, r8
 8003270:	464b      	mov	r3, r9
 8003272:	1891      	adds	r1, r2, r2
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	415b      	adcs	r3, r3
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800327e:	4641      	mov	r1, r8
 8003280:	1851      	adds	r1, r2, r1
 8003282:	6039      	str	r1, [r7, #0]
 8003284:	4649      	mov	r1, r9
 8003286:	414b      	adcs	r3, r1
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003296:	4659      	mov	r1, fp
 8003298:	00cb      	lsls	r3, r1, #3
 800329a:	4651      	mov	r1, sl
 800329c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a0:	4651      	mov	r1, sl
 80032a2:	00ca      	lsls	r2, r1, #3
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	4603      	mov	r3, r0
 80032aa:	4642      	mov	r2, r8
 80032ac:	189b      	adds	r3, r3, r2
 80032ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80032b0:	464b      	mov	r3, r9
 80032b2:	460a      	mov	r2, r1
 80032b4:	eb42 0303 	adc.w	r3, r2, r3
 80032b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	663b      	str	r3, [r7, #96]	; 0x60
 80032c4:	667a      	str	r2, [r7, #100]	; 0x64
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032d2:	4649      	mov	r1, r9
 80032d4:	008b      	lsls	r3, r1, #2
 80032d6:	4641      	mov	r1, r8
 80032d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032dc:	4641      	mov	r1, r8
 80032de:	008a      	lsls	r2, r1, #2
 80032e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032e4:	f7fc ffd4 	bl	8000290 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UART_SetConfig+0x4e4>)
 80032ee:	fba3 1302 	umull	r1, r3, r3, r2
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2164      	movs	r1, #100	; 0x64
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	3332      	adds	r3, #50	; 0x32
 8003300:	4a08      	ldr	r2, [pc, #32]	; (8003324 <UART_SetConfig+0x4e4>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4422      	add	r2, r4
 8003314:	609a      	str	r2, [r3, #8]
}
 8003316:	bf00      	nop
 8003318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800331c:	46bd      	mov	sp, r7
 800331e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	2218      	movs	r2, #24
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 ffc0 	bl	80042c0 <memset>
  rq.ogf = 0x03;
 8003340:	2303      	movs	r3, #3
 8003342:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8003344:	2303      	movs	r3, #3
 8003346:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800334c:	2301      	movs	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003350:	f107 0308 	add.w	r3, r7, #8
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fcfc 	bl	8003d54 <hci_send_req>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	da01      	bge.n	8003366 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8003362:	23ff      	movs	r3, #255	; 0xff
 8003364:	e005      	b.n	8003372 <hci_reset+0x4a>
  if (status) {
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <hci_reset+0x48>
    return status;
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	e000      	b.n	8003372 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3720      	adds	r7, #32
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800337a:	b5b0      	push	{r4, r5, r7, lr}
 800337c:	b0ce      	sub	sp, #312	; 0x138
 800337e:	af00      	add	r7, sp, #0
 8003380:	4605      	mov	r5, r0
 8003382:	460c      	mov	r4, r1
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800338c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003390:	462a      	mov	r2, r5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003398:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800339c:	4622      	mov	r2, r4
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033a4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80033a8:	4602      	mov	r2, r0
 80033aa:	801a      	strh	r2, [r3, #0]
 80033ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033b0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80033b4:	460a      	mov	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80033c0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80033c4:	3308      	adds	r3, #8
 80033c6:	f107 020c 	add.w	r2, r7, #12
 80033ca:	4413      	add	r3, r2
 80033cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80033d0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80033d4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80033d8:	4413      	add	r3, r2
 80033da:	3309      	adds	r3, #9
 80033dc:	f107 020c 	add.w	r2, r7, #12
 80033e0:	4413      	add	r3, r2
 80033e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80033e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80033ea:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80033f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80033fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003400:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003408:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800340c:	3301      	adds	r3, #1
 800340e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8003412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003416:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800341a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800341e:	8812      	ldrh	r2, [r2, #0]
 8003420:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8003424:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003428:	3302      	adds	r3, #2
 800342a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800342e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003432:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003436:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800343a:	8812      	ldrh	r2, [r2, #0]
 800343c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8003440:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003444:	3302      	adds	r3, #2
 8003446:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800344a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800344e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003452:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003456:	7812      	ldrb	r2, [r2, #0]
 8003458:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800345a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800345e:	3301      	adds	r3, #1
 8003460:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8003464:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003468:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800346c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800346e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003472:	3301      	adds	r3, #1
 8003474:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8003478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800347c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003480:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8003482:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003486:	3301      	adds	r3, #1
 8003488:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800348c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003490:	3308      	adds	r3, #8
 8003492:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8003496:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800349a:	4618      	mov	r0, r3
 800349c:	f000 ff02 	bl	80042a4 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 80034a0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80034a4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80034a8:	4413      	add	r3, r2
 80034aa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 80034ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034b2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80034b6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80034b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80034bc:	3301      	adds	r3, #1
 80034be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 80034c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80034c6:	3301      	adds	r3, #1
 80034c8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80034cc:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fee7 	bl	80042a4 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 80034d6:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80034da:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80034de:	4413      	add	r3, r2
 80034e0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 80034e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034e8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80034ec:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80034ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80034f2:	3302      	adds	r3, #2
 80034f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80034f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034fc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8003500:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8003502:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003506:	3302      	adds	r3, #2
 8003508:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800350c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003510:	2218      	movs	r2, #24
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fed3 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 800351a:	233f      	movs	r3, #63	; 0x3f
 800351c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8003520:	2383      	movs	r3, #131	; 0x83
 8003522:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003526:	f107 030c 	add.w	r3, r7, #12
 800352a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800352e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003532:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003536:	f107 030b 	add.w	r3, r7, #11
 800353a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003544:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fc02 	bl	8003d54 <hci_send_req>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	da01      	bge.n	800355a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8003556:	23ff      	movs	r3, #255	; 0xff
 8003558:	e00d      	b.n	8003576 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800355a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800355e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <aci_gap_set_discoverable+0x1fa>
    return status;
 8003568:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800356c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	e000      	b.n	8003576 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800357c:	46bd      	mov	sp, r7
 800357e:	bdb0      	pop	{r4, r5, r7, pc}

08003580 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b0cf      	sub	sp, #316	; 0x13c
 8003584:	af00      	add	r7, sp, #0
 8003586:	4604      	mov	r4, r0
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003590:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800359a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800359e:	4622      	mov	r2, r4
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80035a6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80035aa:	4602      	mov	r2, r0
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80035b2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80035b6:	460a      	mov	r2, r1
 80035b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	2207      	movs	r2, #7
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fe78 	bl	80042c0 <memset>
  uint8_t index_input = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 80035d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035da:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80035de:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80035e6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80035ea:	3301      	adds	r3, #1
 80035ec:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 80035f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80035f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003600:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8003604:	3301      	adds	r3, #1
 8003606:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800360a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800360e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003612:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800361a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800361e:	3301      	adds	r3, #1
 8003620:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003628:	2218      	movs	r2, #24
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fe47 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 8003632:	233f      	movs	r3, #63	; 0x3f
 8003634:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8003638:	238a      	movs	r3, #138	; 0x8a
 800363a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8003646:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800364a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800364e:	f107 030c 	add.w	r3, r7, #12
 8003652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8003656:	2307      	movs	r3, #7
 8003658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800365c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fb76 	bl	8003d54 <hci_send_req>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	da01      	bge.n	8003672 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800366e:	23ff      	movs	r3, #255	; 0xff
 8003670:	e02e      	b.n	80036d0 <aci_gap_init+0x150>
  if (resp.Status) {
 8003672:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <aci_gap_init+0x10c>
    return resp.Status;
 8003680:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	e021      	b.n	80036d0 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800368c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003694:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003698:	b29a      	uxth	r2, r3
 800369a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800369e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 80036a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036ae:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80036b8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 80036ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80036be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036c2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036cc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}

080036da <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b088      	sub	sp, #32
 80036de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	2218      	movs	r2, #24
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fde7 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 80036f2:	233f      	movs	r3, #63	; 0x3f
 80036f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80036f6:	f240 1301 	movw	r3, #257	; 0x101
 80036fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003700:	2301      	movs	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fb22 	bl	8003d54 <hci_send_req>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	da01      	bge.n	800371a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8003716:	23ff      	movs	r3, #255	; 0xff
 8003718:	e005      	b.n	8003726 <aci_gatt_init+0x4c>
  if (status) {
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <aci_gatt_init+0x4a>
    return status;
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	e000      	b.n	8003726 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800372e:	b590      	push	{r4, r7, lr}
 8003730:	b0cf      	sub	sp, #316	; 0x13c
 8003732:	af00      	add	r7, sp, #0
 8003734:	4604      	mov	r4, r0
 8003736:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800373a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800373e:	6001      	str	r1, [r0, #0]
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003748:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800374c:	4622      	mov	r2, r4
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003754:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8003758:	4602      	mov	r2, r0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003760:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8003764:	460a      	mov	r2, r1
 8003766:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8003770:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003774:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d00a      	beq.n	8003794 <aci_gatt_add_service+0x66>
 800377e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003782:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d101      	bne.n	8003790 <aci_gatt_add_service+0x62>
 800378c:	2311      	movs	r3, #17
 800378e:	e002      	b.n	8003796 <aci_gatt_add_service+0x68>
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <aci_gatt_add_service+0x68>
 8003794:	2303      	movs	r3, #3
 8003796:	f107 020c 	add.w	r2, r7, #12
 800379a:	4413      	add	r3, r2
 800379c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	2203      	movs	r2, #3
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd89 	bl	80042c0 <memset>
  uint8_t index_input = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 80037b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80037bc:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80037c4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80037c8:	3301      	adds	r3, #1
 80037ca:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 80037ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80037d2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <aci_gatt_add_service+0xb4>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d004      	beq.n	80037ea <aci_gatt_add_service+0xbc>
 80037e0:	e007      	b.n	80037f2 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 80037e2:	2302      	movs	r3, #2
 80037e4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80037e8:	e005      	b.n	80037f6 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80037ea:	2310      	movs	r3, #16
 80037ec:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80037f0:	e001      	b.n	80037f6 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80037f2:	2347      	movs	r3, #71	; 0x47
 80037f4:	e06c      	b.n	80038d0 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 80037f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037fa:	1c58      	adds	r0, r3, #1
 80037fc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8003800:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003804:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	f000 fd4b 	bl	80042a4 <memcpy>
    index_input += size;
 800380e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003812:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8003816:	4413      	add	r3, r2
 8003818:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800381c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003820:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8003824:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800382c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003830:	3301      	adds	r3, #1
 8003832:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8003836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800383a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800383e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8003846:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800384a:	3301      	adds	r3, #1
 800384c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003854:	2218      	movs	r2, #24
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fd31 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 800385e:	233f      	movs	r3, #63	; 0x3f
 8003860:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8003864:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003868:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003874:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003878:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8003884:	2303      	movs	r3, #3
 8003886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800388a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fa5f 	bl	8003d54 <hci_send_req>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	da01      	bge.n	80038a0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800389c:	23ff      	movs	r3, #255	; 0xff
 800389e:	e017      	b.n	80038d0 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 80038a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <aci_gatt_add_service+0x18c>
    return resp.Status;
 80038ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	e00a      	b.n	80038d0 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 80038ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80038be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80038cc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}

080038da <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80038da:	b5b0      	push	{r4, r5, r7, lr}
 80038dc:	b0cc      	sub	sp, #304	; 0x130
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4605      	mov	r5, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80038f0:	462a      	mov	r2, r5
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80038f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038fc:	4622      	mov	r2, r4
 80038fe:	801a      	strh	r2, [r3, #0]
 8003900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003904:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8003908:	4602      	mov	r2, r0
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003910:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8003914:	460a      	mov	r2, r1
 8003916:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003924:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8003932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003936:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800393a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800393e:	8812      	ldrh	r2, [r2, #0]
 8003940:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8003942:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003946:	3302      	adds	r3, #2
 8003948:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800394c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003950:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003954:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800395c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003960:	3302      	adds	r3, #2
 8003962:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 8003966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800396a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800396e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8003976:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800397a:	3301      	adds	r3, #1
 800397c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8003980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003984:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003988:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8003990:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003994:	3301      	adds	r3, #1
 8003996:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800399a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399e:	1d98      	adds	r0, r3, #6
 80039a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039a4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039b0:	f000 fc78 	bl	80042a4 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 80039b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80039b8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80039bc:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80039c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80039cc:	2218      	movs	r2, #24
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fc75 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 80039d6:	233f      	movs	r3, #63	; 0x3f
 80039d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80039dc:	f44f 7383 	mov.w	r3, #262	; 0x106
 80039e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80039e4:	f107 030c 	add.w	r3, r7, #12
 80039e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80039ec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80039f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80039f4:	f107 030b 	add.w	r3, r7, #11
 80039f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003a02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003a06:	2100      	movs	r1, #0
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f9a3 	bl	8003d54 <hci_send_req>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da01      	bge.n	8003a18 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8003a14:	23ff      	movs	r3, #255	; 0xff
 8003a16:	e00d      	b.n	8003a34 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8003a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a1c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <aci_gatt_update_char_value+0x158>
    return status;
 8003a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a2a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	e000      	b.n	8003a34 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bdb0      	pop	{r4, r5, r7, pc}

08003a3e <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b0cc      	sub	sp, #304	; 0x130
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a52:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8003a56:	4602      	mov	r2, r0
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a5e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003a62:	460a      	mov	r2, r1
 8003a64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8003a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a72:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003a76:	2200      	movs	r2, #0
 8003a78:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8003a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003a88:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8003a90:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003a94:	3301      	adds	r3, #1
 8003a96:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8003a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8003aa2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8003aaa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003aae:	3301      	adds	r3, #1
 8003ab0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8003ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ab8:	1c98      	adds	r0, r3, #2
 8003aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003abe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	f000 fbe9 	bl	80042a4 <memcpy>
    index_input += Length*sizeof(uint8_t);
 8003ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ad6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8003ada:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003aea:	2218      	movs	r2, #24
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fbe6 	bl	80042c0 <memset>
  rq.ogf = 0x3f;
 8003af4:	233f      	movs	r3, #63	; 0x3f
 8003af6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8003afa:	230c      	movs	r3, #12
 8003afc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8003b08:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8003b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8003b10:	f107 030b 	add.w	r3, r7, #11
 8003b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8003b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f915 	bl	8003d54 <hci_send_req>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da01      	bge.n	8003b34 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003b30:	23ff      	movs	r3, #255	; 0xff
 8003b32:	e00d      	b.n	8003b50 <aci_hal_write_config_data+0x112>
  if (status) {
 8003b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b38:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <aci_hal_write_config_data+0x110>
    return status;
 8003b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003b46:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	e000      	b.n	8003b50 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3308      	adds	r3, #8
 8003b66:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d001      	beq.n	8003b74 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00c      	b.n	8003b8e <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3302      	adds	r3, #2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003b82:	3b03      	subs	r3, #3
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e000      	b.n	8003b8e <verify_packet+0x34>
  
  return 0;      
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b0a6      	sub	sp, #152	; 0x98
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	81fb      	strh	r3, [r7, #14]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	81bb      	strh	r3, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003bb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003bb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb8:	b21a      	sxth	r2, r3
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b21b      	sxth	r3, r3
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	b21b      	sxth	r3, r3
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003bc8:	7afb      	ldrb	r3, [r7, #11]
 8003bca:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003bd0:	f107 0318 	add.w	r3, r7, #24
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	8819      	ldrh	r1, [r3, #0]
 8003bde:	789b      	ldrb	r3, [r3, #2]
 8003be0:	8011      	strh	r1, [r2, #0]
 8003be2:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003be4:	f107 0318 	add.w	r3, r7, #24
 8003be8:	3304      	adds	r3, #4
 8003bea:	7afa      	ldrb	r2, [r7, #11]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fb58 	bl	80042a4 <memcpy>
  
  if (hciContext.io.Send)
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <send_cmd+0x7c>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <send_cmd+0x7c>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	7afa      	ldrb	r2, [r7, #11]
 8003c02:	b292      	uxth	r2, r2
 8003c04:	3204      	adds	r2, #4
 8003c06:	b291      	uxth	r1, r2
 8003c08:	f107 0218 	add.w	r2, r7, #24
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4798      	blx	r3
  }
}
 8003c10:	bf00      	nop
 8003c12:	3798      	adds	r7, #152	; 0x98
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	200007e0 	.word	0x200007e0

08003c1c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003c26:	e00a      	b.n	8003c3e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003c28:	f107 030c 	add.w	r3, r7, #12
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f000 fabe 	bl	80041b0 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fa25 	bl	8004088 <list_insert_head>
  while (!list_is_empty(src_list))
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f000 fa00 	bl	8004044 <list_is_empty>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <move_list+0xc>
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c5a:	e009      	b.n	8003c70 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4809      	ldr	r0, [pc, #36]	; (8003c88 <free_event_list+0x34>)
 8003c62:	f000 fa7e 	bl	8004162 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4808      	ldr	r0, [pc, #32]	; (8003c8c <free_event_list+0x38>)
 8003c6c:	f000 fa32 	bl	80040d4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003c70:	4806      	ldr	r0, [pc, #24]	; (8003c8c <free_event_list+0x38>)
 8003c72:	f000 fac4 	bl	80041fe <list_get_size>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	ddef      	ble.n	8003c5c <free_event_list+0x8>
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000260 	.word	0x20000260
 8003c8c:	20000258 	.word	0x20000258

08003c90 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <hci_init+0x74>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003ca6:	4818      	ldr	r0, [pc, #96]	; (8003d08 <hci_init+0x78>)
 8003ca8:	f000 f9bc 	bl	8004024 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003cac:	4817      	ldr	r0, [pc, #92]	; (8003d0c <hci_init+0x7c>)
 8003cae:	f000 f9b9 	bl	8004024 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003cb2:	f7fc fe07 	bl	80008c4 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e00c      	b.n	8003cd6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	228c      	movs	r2, #140	; 0x8c
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <hci_init+0x80>)
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	480f      	ldr	r0, [pc, #60]	; (8003d08 <hci_init+0x78>)
 8003ccc:	f000 fa02 	bl	80040d4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d9ef      	bls.n	8003cbc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003cdc:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <hci_init+0x74>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <hci_init+0x5c>
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <hci_init+0x74>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2000      	movs	r0, #0
 8003cea:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <hci_init+0x74>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <hci_init+0x6a>
 8003cf4:	4b03      	ldr	r3, [pc, #12]	; (8003d04 <hci_init+0x74>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4798      	blx	r3
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200007e0 	.word	0x200007e0
 8003d08:	20000258 	.word	0x20000258
 8003d0c:	20000260 	.word	0x20000260
 8003d10:	20000268 	.word	0x20000268

08003d14 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <hci_register_io_bus+0x3c>)
 8003d22:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <hci_register_io_bus+0x3c>)
 8003d2a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <hci_register_io_bus+0x3c>)
 8003d32:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <hci_register_io_bus+0x3c>)
 8003d3a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a03      	ldr	r2, [pc, #12]	; (8003d50 <hci_register_io_bus+0x3c>)
 8003d42:	6093      	str	r3, [r2, #8]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	200007e0 	.word	0x200007e0

08003d54 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	885b      	ldrh	r3, [r3, #2]
 8003d64:	b21b      	sxth	r3, r3
 8003d66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	029b      	lsls	r3, r3, #10
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 f94e 	bl	8004024 <list_init_head>

  free_event_list();
 8003d88:	f7ff ff64 	bl	8003c54 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8818      	ldrh	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8859      	ldrh	r1, [r3, #2]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f7ff fefd 	bl	8003b9c <send_cmd>
  
  if (async)
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <hci_send_req+0x58>
  {
    return 0;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e0e5      	b.n	8003f78 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003dac:	f7fd fad0 	bl	8001350 <HAL_GetTick>
 8003db0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003db2:	f7fd facd 	bl	8001350 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc0:	f200 80b6 	bhi.w	8003f30 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003dc4:	486e      	ldr	r0, [pc, #440]	; (8003f80 <hci_send_req+0x22c>)
 8003dc6:	f000 f93d 	bl	8004044 <list_is_empty>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d000      	beq.n	8003dd2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003dd0:	e7ef      	b.n	8003db2 <hci_send_req+0x5e>
      {
        break;
 8003dd2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003dd4:	f107 0310 	add.w	r3, r7, #16
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4869      	ldr	r0, [pc, #420]	; (8003f80 <hci_send_req+0x22c>)
 8003ddc:	f000 f9c1 	bl	8004162 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3308      	adds	r3, #8
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d17b      	bne.n	8003ee6 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	3301      	adds	r3, #1
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	3308      	adds	r3, #8
 8003df8:	3303      	adds	r3, #3
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e02:	3b03      	subs	r3, #3
 8003e04:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0c:	d04d      	beq.n	8003eaa <hci_send_req+0x156>
 8003e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e10:	dc6b      	bgt.n	8003eea <hci_send_req+0x196>
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	f000 808e 	beq.w	8003f34 <hci_send_req+0x1e0>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	dc66      	bgt.n	8003eea <hci_send_req+0x196>
 8003e1c:	2b0e      	cmp	r3, #14
 8003e1e:	d024      	beq.n	8003e6a <hci_send_req+0x116>
 8003e20:	2b0f      	cmp	r3, #15
 8003e22:	d162      	bne.n	8003eea <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	885b      	ldrh	r3, [r3, #2]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 8081 	bne.w	8003f38 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b0f      	cmp	r3, #15
 8003e3c:	d004      	beq.n	8003e48 <hci_send_req+0xf4>
          if (cs->status) {
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d053      	beq.n	8003eee <hci_send_req+0x19a>
            goto failed;
 8003e46:	e07a      	b.n	8003f3e <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	bf28      	it	cs
 8003e52:	461a      	movcs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6918      	ldr	r0, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e64:	f000 fa1e 	bl	80042a4 <memcpy>
        goto done;
 8003e68:	e07a      	b.n	8003f60 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d15f      	bne.n	8003f3c <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	3303      	adds	r3, #3
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	bf28      	it	cs
 8003e92:	461a      	movcs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6918      	ldr	r0, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea4:	f000 f9fe 	bl	80042a4 <memcpy>
        goto done;
 8003ea8:	e05a      	b.n	8003f60 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d11a      	bne.n	8003ef2 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	bf28      	it	cs
 8003ecc:	461a      	movcs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6918      	ldr	r0, [r3, #16]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 f9e0 	bl	80042a4 <memcpy>
        goto done;
 8003ee4:	e03c      	b.n	8003f60 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <hci_send_req+0x1a0>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <hci_send_req+0x1a0>
          break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <hci_send_req+0x1a0>
          break;
 8003ef2:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003ef4:	4823      	ldr	r0, [pc, #140]	; (8003f84 <hci_send_req+0x230>)
 8003ef6:	f000 f8a5 	bl	8004044 <list_is_empty>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <hci_send_req+0x1c8>
 8003f00:	481f      	ldr	r0, [pc, #124]	; (8003f80 <hci_send_req+0x22c>)
 8003f02:	f000 f89f 	bl	8004044 <list_is_empty>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481c      	ldr	r0, [pc, #112]	; (8003f84 <hci_send_req+0x230>)
 8003f12:	f000 f8df 	bl	80040d4 <list_insert_tail>
      hciReadPacket=NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e008      	b.n	8003f2e <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	f107 0308 	add.w	r3, r7, #8
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f8d5 	bl	80040d4 <list_insert_tail>
      hciReadPacket=NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  {
 8003f2e:	e73d      	b.n	8003dac <hci_send_req+0x58>
        goto failed;
 8003f30:	bf00      	nop
 8003f32:	e004      	b.n	8003f3e <hci_send_req+0x1ea>
        goto failed;
 8003f34:	bf00      	nop
 8003f36:	e002      	b.n	8003f3e <hci_send_req+0x1ea>
          goto failed;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <hci_send_req+0x1ea>
          goto failed;
 8003f3c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4619      	mov	r1, r3
 8003f48:	480e      	ldr	r0, [pc, #56]	; (8003f84 <hci_send_req+0x230>)
 8003f4a:	f000 f89d 	bl	8004088 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	4619      	mov	r1, r3
 8003f54:	480a      	ldr	r0, [pc, #40]	; (8003f80 <hci_send_req+0x22c>)
 8003f56:	f7ff fe61 	bl	8003c1c <move_list>

  return -1;
 8003f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f5e:	e00b      	b.n	8003f78 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4619      	mov	r1, r3
 8003f64:	4807      	ldr	r0, [pc, #28]	; (8003f84 <hci_send_req+0x230>)
 8003f66:	f000 f88f 	bl	8004088 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4803      	ldr	r0, [pc, #12]	; (8003f80 <hci_send_req+0x22c>)
 8003f72:	f7ff fe53 	bl	8003c1c <move_list>

  return 0;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3738      	adds	r7, #56	; 0x38
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000260 	.word	0x20000260
 8003f84:	20000258 	.word	0x20000258

08003f88 <hci_notify_asynch_evt>:
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
  }
}

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003f98:	481f      	ldr	r0, [pc, #124]	; (8004018 <hci_notify_asynch_evt+0x90>)
 8003f9a:	f000 f853 	bl	8004044 <list_is_empty>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d132      	bne.n	800400a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	4619      	mov	r1, r3
 8003faa:	481b      	ldr	r0, [pc, #108]	; (8004018 <hci_notify_asynch_evt+0x90>)
 8003fac:	f000 f8d9 	bl	8004162 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <hci_notify_asynch_evt+0x94>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d02a      	beq.n	800400e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8003fb8:	4b18      	ldr	r3, [pc, #96]	; (800401c <hci_notify_asynch_evt+0x94>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4798      	blx	r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d016      	beq.n	8003ffe <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	7cfa      	ldrb	r2, [r7, #19]
 8003fd4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fdbd 	bl	8003b5a <verify_packet>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480d      	ldr	r0, [pc, #52]	; (8004020 <hci_notify_asynch_evt+0x98>)
 8003fec:	f000 f872 	bl	80040d4 <list_insert_tail>
 8003ff0:	e00d      	b.n	800400e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <hci_notify_asynch_evt+0x90>)
 8003ff8:	f000 f846 	bl	8004088 <list_insert_head>
 8003ffc:	e007      	b.n	800400e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4619      	mov	r1, r3
 8004002:	4805      	ldr	r0, [pc, #20]	; (8004018 <hci_notify_asynch_evt+0x90>)
 8004004:	f000 f840 	bl	8004088 <list_insert_head>
 8004008:	e001      	b.n	800400e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800400e:	697b      	ldr	r3, [r7, #20]
  
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000258 	.word	0x20000258
 800401c:	200007e0 	.word	0x200007e0
 8004020:	20000260 	.word	0x20000260

08004024 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	605a      	str	r2, [r3, #4]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404c:	f3ef 8310 	mrs	r3, PRIMASK
 8004050:	60fb      	str	r3, [r7, #12]
  return(result);
 8004052:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004056:	b672      	cpsid	i
}
 8004058:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d102      	bne.n	800406a <list_is_empty+0x26>
  {
    return_value = 1;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
 8004068:	e001      	b.n	800406e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	75fb      	strb	r3, [r7, #23]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004092:	f3ef 8310 	mrs	r3, PRIMASK
 8004096:	60fb      	str	r3, [r7, #12]
  return(result);
 8004098:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800409a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800409c:	b672      	cpsid	i
}
 800409e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f383 8810 	msr	PRIMASK, r3
}
 80040c6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040de:	f3ef 8310 	mrs	r3, PRIMASK
 80040e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80040e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80040e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80040e8:	b672      	cpsid	i
}
 80040ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004128:	f3ef 8310 	mrs	r3, PRIMASK
 800412c:	60fb      	str	r3, [r7, #12]
  return(result);
 800412e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004132:	b672      	cpsid	i
}
 8004134:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f383 8810 	msr	PRIMASK, r3
}
 8004154:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416c:	f3ef 8310 	mrs	r3, PRIMASK
 8004170:	60fb      	str	r3, [r7, #12]
  return(result);
 8004172:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004176:	b672      	cpsid	i
}
 8004178:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ffca 	bl	8004120 <list_remove_node>
  (*node)->next = NULL;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80041c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80041c4:	b672      	cpsid	i
}
 80041c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ffa3 	bl	8004120 <list_remove_node>
  (*node)->next = NULL;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80041f6:	bf00      	nop
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80041fe:	b480      	push	{r7}
 8004200:	b089      	sub	sp, #36	; 0x24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  int size = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420a:	f3ef 8310 	mrs	r3, PRIMASK
 800420e:	613b      	str	r3, [r7, #16]
  return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004214:	b672      	cpsid	i
}
 8004216:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800421e:	e005      	b.n	800422c <list_get_size+0x2e>
  {
    size++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d1f5      	bne.n	8004220 <list_get_size+0x22>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8004240:	69fb      	ldr	r3, [r7, #28]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000024 	.word	0x20000024

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 ffbc 	bl	80051ec <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	080053d0 	.word	0x080053d0
 8004298:	080053d0 	.word	0x080053d0
 800429c:	080053d0 	.word	0x080053d0
 80042a0:	080053d4 	.word	0x080053d4

080042a4 <memcpy>:
 80042a4:	440a      	add	r2, r1
 80042a6:	4291      	cmp	r1, r2
 80042a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80042ac:	d100      	bne.n	80042b0 <memcpy+0xc>
 80042ae:	4770      	bx	lr
 80042b0:	b510      	push	{r4, lr}
 80042b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ba:	4291      	cmp	r1, r2
 80042bc:	d1f9      	bne.n	80042b2 <memcpy+0xe>
 80042be:	bd10      	pop	{r4, pc}

080042c0 <memset>:
 80042c0:	4402      	add	r2, r0
 80042c2:	4603      	mov	r3, r0
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d100      	bne.n	80042ca <memset+0xa>
 80042c8:	4770      	bx	lr
 80042ca:	f803 1b01 	strb.w	r1, [r3], #1
 80042ce:	e7f9      	b.n	80042c4 <memset+0x4>

080042d0 <iprintf>:
 80042d0:	b40f      	push	{r0, r1, r2, r3}
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <iprintf+0x2c>)
 80042d4:	b513      	push	{r0, r1, r4, lr}
 80042d6:	681c      	ldr	r4, [r3, #0]
 80042d8:	b124      	cbz	r4, 80042e4 <iprintf+0x14>
 80042da:	69a3      	ldr	r3, [r4, #24]
 80042dc:	b913      	cbnz	r3, 80042e4 <iprintf+0x14>
 80042de:	4620      	mov	r0, r4
 80042e0:	f000 f866 	bl	80043b0 <__sinit>
 80042e4:	ab05      	add	r3, sp, #20
 80042e6:	9a04      	ldr	r2, [sp, #16]
 80042e8:	68a1      	ldr	r1, [r4, #8]
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	4620      	mov	r0, r4
 80042ee:	f000 f9bd 	bl	800466c <_vfiprintf_r>
 80042f2:	b002      	add	sp, #8
 80042f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f8:	b004      	add	sp, #16
 80042fa:	4770      	bx	lr
 80042fc:	20000024 	.word	0x20000024

08004300 <std>:
 8004300:	2300      	movs	r3, #0
 8004302:	b510      	push	{r4, lr}
 8004304:	4604      	mov	r4, r0
 8004306:	e9c0 3300 	strd	r3, r3, [r0]
 800430a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800430e:	6083      	str	r3, [r0, #8]
 8004310:	8181      	strh	r1, [r0, #12]
 8004312:	6643      	str	r3, [r0, #100]	; 0x64
 8004314:	81c2      	strh	r2, [r0, #14]
 8004316:	6183      	str	r3, [r0, #24]
 8004318:	4619      	mov	r1, r3
 800431a:	2208      	movs	r2, #8
 800431c:	305c      	adds	r0, #92	; 0x5c
 800431e:	f7ff ffcf 	bl	80042c0 <memset>
 8004322:	4b05      	ldr	r3, [pc, #20]	; (8004338 <std+0x38>)
 8004324:	6263      	str	r3, [r4, #36]	; 0x24
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <std+0x3c>)
 8004328:	62a3      	str	r3, [r4, #40]	; 0x28
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <std+0x40>)
 800432c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <std+0x44>)
 8004330:	6224      	str	r4, [r4, #32]
 8004332:	6323      	str	r3, [r4, #48]	; 0x30
 8004334:	bd10      	pop	{r4, pc}
 8004336:	bf00      	nop
 8004338:	08004c15 	.word	0x08004c15
 800433c:	08004c37 	.word	0x08004c37
 8004340:	08004c6f 	.word	0x08004c6f
 8004344:	08004c93 	.word	0x08004c93

08004348 <_cleanup_r>:
 8004348:	4901      	ldr	r1, [pc, #4]	; (8004350 <_cleanup_r+0x8>)
 800434a:	f000 b8af 	b.w	80044ac <_fwalk_reent>
 800434e:	bf00      	nop
 8004350:	08004f6d 	.word	0x08004f6d

08004354 <__sfmoreglue>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	2268      	movs	r2, #104	; 0x68
 8004358:	1e4d      	subs	r5, r1, #1
 800435a:	4355      	muls	r5, r2
 800435c:	460e      	mov	r6, r1
 800435e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004362:	f000 f8e5 	bl	8004530 <_malloc_r>
 8004366:	4604      	mov	r4, r0
 8004368:	b140      	cbz	r0, 800437c <__sfmoreglue+0x28>
 800436a:	2100      	movs	r1, #0
 800436c:	e9c0 1600 	strd	r1, r6, [r0]
 8004370:	300c      	adds	r0, #12
 8004372:	60a0      	str	r0, [r4, #8]
 8004374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004378:	f7ff ffa2 	bl	80042c0 <memset>
 800437c:	4620      	mov	r0, r4
 800437e:	bd70      	pop	{r4, r5, r6, pc}

08004380 <__sfp_lock_acquire>:
 8004380:	4801      	ldr	r0, [pc, #4]	; (8004388 <__sfp_lock_acquire+0x8>)
 8004382:	f000 b8b3 	b.w	80044ec <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	20000801 	.word	0x20000801

0800438c <__sfp_lock_release>:
 800438c:	4801      	ldr	r0, [pc, #4]	; (8004394 <__sfp_lock_release+0x8>)
 800438e:	f000 b8ae 	b.w	80044ee <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	20000801 	.word	0x20000801

08004398 <__sinit_lock_acquire>:
 8004398:	4801      	ldr	r0, [pc, #4]	; (80043a0 <__sinit_lock_acquire+0x8>)
 800439a:	f000 b8a7 	b.w	80044ec <__retarget_lock_acquire_recursive>
 800439e:	bf00      	nop
 80043a0:	20000802 	.word	0x20000802

080043a4 <__sinit_lock_release>:
 80043a4:	4801      	ldr	r0, [pc, #4]	; (80043ac <__sinit_lock_release+0x8>)
 80043a6:	f000 b8a2 	b.w	80044ee <__retarget_lock_release_recursive>
 80043aa:	bf00      	nop
 80043ac:	20000802 	.word	0x20000802

080043b0 <__sinit>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	4604      	mov	r4, r0
 80043b4:	f7ff fff0 	bl	8004398 <__sinit_lock_acquire>
 80043b8:	69a3      	ldr	r3, [r4, #24]
 80043ba:	b11b      	cbz	r3, 80043c4 <__sinit+0x14>
 80043bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c0:	f7ff bff0 	b.w	80043a4 <__sinit_lock_release>
 80043c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043c8:	6523      	str	r3, [r4, #80]	; 0x50
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <__sinit+0x68>)
 80043cc:	4a13      	ldr	r2, [pc, #76]	; (800441c <__sinit+0x6c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	bf04      	itt	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	61a3      	streq	r3, [r4, #24]
 80043da:	4620      	mov	r0, r4
 80043dc:	f000 f820 	bl	8004420 <__sfp>
 80043e0:	6060      	str	r0, [r4, #4]
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 f81c 	bl	8004420 <__sfp>
 80043e8:	60a0      	str	r0, [r4, #8]
 80043ea:	4620      	mov	r0, r4
 80043ec:	f000 f818 	bl	8004420 <__sfp>
 80043f0:	2200      	movs	r2, #0
 80043f2:	60e0      	str	r0, [r4, #12]
 80043f4:	2104      	movs	r1, #4
 80043f6:	6860      	ldr	r0, [r4, #4]
 80043f8:	f7ff ff82 	bl	8004300 <std>
 80043fc:	68a0      	ldr	r0, [r4, #8]
 80043fe:	2201      	movs	r2, #1
 8004400:	2109      	movs	r1, #9
 8004402:	f7ff ff7d 	bl	8004300 <std>
 8004406:	68e0      	ldr	r0, [r4, #12]
 8004408:	2202      	movs	r2, #2
 800440a:	2112      	movs	r1, #18
 800440c:	f7ff ff78 	bl	8004300 <std>
 8004410:	2301      	movs	r3, #1
 8004412:	61a3      	str	r3, [r4, #24]
 8004414:	e7d2      	b.n	80043bc <__sinit+0xc>
 8004416:	bf00      	nop
 8004418:	08005330 	.word	0x08005330
 800441c:	08004349 	.word	0x08004349

08004420 <__sfp>:
 8004420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004422:	4607      	mov	r7, r0
 8004424:	f7ff ffac 	bl	8004380 <__sfp_lock_acquire>
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <__sfp+0x84>)
 800442a:	681e      	ldr	r6, [r3, #0]
 800442c:	69b3      	ldr	r3, [r6, #24]
 800442e:	b913      	cbnz	r3, 8004436 <__sfp+0x16>
 8004430:	4630      	mov	r0, r6
 8004432:	f7ff ffbd 	bl	80043b0 <__sinit>
 8004436:	3648      	adds	r6, #72	; 0x48
 8004438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800443c:	3b01      	subs	r3, #1
 800443e:	d503      	bpl.n	8004448 <__sfp+0x28>
 8004440:	6833      	ldr	r3, [r6, #0]
 8004442:	b30b      	cbz	r3, 8004488 <__sfp+0x68>
 8004444:	6836      	ldr	r6, [r6, #0]
 8004446:	e7f7      	b.n	8004438 <__sfp+0x18>
 8004448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800444c:	b9d5      	cbnz	r5, 8004484 <__sfp+0x64>
 800444e:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <__sfp+0x88>)
 8004450:	60e3      	str	r3, [r4, #12]
 8004452:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004456:	6665      	str	r5, [r4, #100]	; 0x64
 8004458:	f000 f847 	bl	80044ea <__retarget_lock_init_recursive>
 800445c:	f7ff ff96 	bl	800438c <__sfp_lock_release>
 8004460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004468:	6025      	str	r5, [r4, #0]
 800446a:	61a5      	str	r5, [r4, #24]
 800446c:	2208      	movs	r2, #8
 800446e:	4629      	mov	r1, r5
 8004470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004474:	f7ff ff24 	bl	80042c0 <memset>
 8004478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800447c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004480:	4620      	mov	r0, r4
 8004482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004484:	3468      	adds	r4, #104	; 0x68
 8004486:	e7d9      	b.n	800443c <__sfp+0x1c>
 8004488:	2104      	movs	r1, #4
 800448a:	4638      	mov	r0, r7
 800448c:	f7ff ff62 	bl	8004354 <__sfmoreglue>
 8004490:	4604      	mov	r4, r0
 8004492:	6030      	str	r0, [r6, #0]
 8004494:	2800      	cmp	r0, #0
 8004496:	d1d5      	bne.n	8004444 <__sfp+0x24>
 8004498:	f7ff ff78 	bl	800438c <__sfp_lock_release>
 800449c:	230c      	movs	r3, #12
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	e7ee      	b.n	8004480 <__sfp+0x60>
 80044a2:	bf00      	nop
 80044a4:	08005330 	.word	0x08005330
 80044a8:	ffff0001 	.word	0xffff0001

080044ac <_fwalk_reent>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	4606      	mov	r6, r0
 80044b2:	4688      	mov	r8, r1
 80044b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044b8:	2700      	movs	r7, #0
 80044ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044be:	f1b9 0901 	subs.w	r9, r9, #1
 80044c2:	d505      	bpl.n	80044d0 <_fwalk_reent+0x24>
 80044c4:	6824      	ldr	r4, [r4, #0]
 80044c6:	2c00      	cmp	r4, #0
 80044c8:	d1f7      	bne.n	80044ba <_fwalk_reent+0xe>
 80044ca:	4638      	mov	r0, r7
 80044cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d0:	89ab      	ldrh	r3, [r5, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d907      	bls.n	80044e6 <_fwalk_reent+0x3a>
 80044d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044da:	3301      	adds	r3, #1
 80044dc:	d003      	beq.n	80044e6 <_fwalk_reent+0x3a>
 80044de:	4629      	mov	r1, r5
 80044e0:	4630      	mov	r0, r6
 80044e2:	47c0      	blx	r8
 80044e4:	4307      	orrs	r7, r0
 80044e6:	3568      	adds	r5, #104	; 0x68
 80044e8:	e7e9      	b.n	80044be <_fwalk_reent+0x12>

080044ea <__retarget_lock_init_recursive>:
 80044ea:	4770      	bx	lr

080044ec <__retarget_lock_acquire_recursive>:
 80044ec:	4770      	bx	lr

080044ee <__retarget_lock_release_recursive>:
 80044ee:	4770      	bx	lr

080044f0 <sbrk_aligned>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4e0e      	ldr	r6, [pc, #56]	; (800452c <sbrk_aligned+0x3c>)
 80044f4:	460c      	mov	r4, r1
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	4605      	mov	r5, r0
 80044fa:	b911      	cbnz	r1, 8004502 <sbrk_aligned+0x12>
 80044fc:	f000 fb7a 	bl	8004bf4 <_sbrk_r>
 8004500:	6030      	str	r0, [r6, #0]
 8004502:	4621      	mov	r1, r4
 8004504:	4628      	mov	r0, r5
 8004506:	f000 fb75 	bl	8004bf4 <_sbrk_r>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d00a      	beq.n	8004524 <sbrk_aligned+0x34>
 800450e:	1cc4      	adds	r4, r0, #3
 8004510:	f024 0403 	bic.w	r4, r4, #3
 8004514:	42a0      	cmp	r0, r4
 8004516:	d007      	beq.n	8004528 <sbrk_aligned+0x38>
 8004518:	1a21      	subs	r1, r4, r0
 800451a:	4628      	mov	r0, r5
 800451c:	f000 fb6a 	bl	8004bf4 <_sbrk_r>
 8004520:	3001      	adds	r0, #1
 8004522:	d101      	bne.n	8004528 <sbrk_aligned+0x38>
 8004524:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004528:	4620      	mov	r0, r4
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	20000808 	.word	0x20000808

08004530 <_malloc_r>:
 8004530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004534:	1ccd      	adds	r5, r1, #3
 8004536:	f025 0503 	bic.w	r5, r5, #3
 800453a:	3508      	adds	r5, #8
 800453c:	2d0c      	cmp	r5, #12
 800453e:	bf38      	it	cc
 8004540:	250c      	movcc	r5, #12
 8004542:	2d00      	cmp	r5, #0
 8004544:	4607      	mov	r7, r0
 8004546:	db01      	blt.n	800454c <_malloc_r+0x1c>
 8004548:	42a9      	cmp	r1, r5
 800454a:	d905      	bls.n	8004558 <_malloc_r+0x28>
 800454c:	230c      	movs	r3, #12
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	2600      	movs	r6, #0
 8004552:	4630      	mov	r0, r6
 8004554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004558:	4e2e      	ldr	r6, [pc, #184]	; (8004614 <_malloc_r+0xe4>)
 800455a:	f000 fdbb 	bl	80050d4 <__malloc_lock>
 800455e:	6833      	ldr	r3, [r6, #0]
 8004560:	461c      	mov	r4, r3
 8004562:	bb34      	cbnz	r4, 80045b2 <_malloc_r+0x82>
 8004564:	4629      	mov	r1, r5
 8004566:	4638      	mov	r0, r7
 8004568:	f7ff ffc2 	bl	80044f0 <sbrk_aligned>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	4604      	mov	r4, r0
 8004570:	d14d      	bne.n	800460e <_malloc_r+0xde>
 8004572:	6834      	ldr	r4, [r6, #0]
 8004574:	4626      	mov	r6, r4
 8004576:	2e00      	cmp	r6, #0
 8004578:	d140      	bne.n	80045fc <_malloc_r+0xcc>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	4631      	mov	r1, r6
 800457e:	4638      	mov	r0, r7
 8004580:	eb04 0803 	add.w	r8, r4, r3
 8004584:	f000 fb36 	bl	8004bf4 <_sbrk_r>
 8004588:	4580      	cmp	r8, r0
 800458a:	d13a      	bne.n	8004602 <_malloc_r+0xd2>
 800458c:	6821      	ldr	r1, [r4, #0]
 800458e:	3503      	adds	r5, #3
 8004590:	1a6d      	subs	r5, r5, r1
 8004592:	f025 0503 	bic.w	r5, r5, #3
 8004596:	3508      	adds	r5, #8
 8004598:	2d0c      	cmp	r5, #12
 800459a:	bf38      	it	cc
 800459c:	250c      	movcc	r5, #12
 800459e:	4629      	mov	r1, r5
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff ffa5 	bl	80044f0 <sbrk_aligned>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d02b      	beq.n	8004602 <_malloc_r+0xd2>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	442b      	add	r3, r5
 80045ae:	6023      	str	r3, [r4, #0]
 80045b0:	e00e      	b.n	80045d0 <_malloc_r+0xa0>
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	1b52      	subs	r2, r2, r5
 80045b6:	d41e      	bmi.n	80045f6 <_malloc_r+0xc6>
 80045b8:	2a0b      	cmp	r2, #11
 80045ba:	d916      	bls.n	80045ea <_malloc_r+0xba>
 80045bc:	1961      	adds	r1, r4, r5
 80045be:	42a3      	cmp	r3, r4
 80045c0:	6025      	str	r5, [r4, #0]
 80045c2:	bf18      	it	ne
 80045c4:	6059      	strne	r1, [r3, #4]
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	bf08      	it	eq
 80045ca:	6031      	streq	r1, [r6, #0]
 80045cc:	5162      	str	r2, [r4, r5]
 80045ce:	604b      	str	r3, [r1, #4]
 80045d0:	4638      	mov	r0, r7
 80045d2:	f104 060b 	add.w	r6, r4, #11
 80045d6:	f000 fd83 	bl	80050e0 <__malloc_unlock>
 80045da:	f026 0607 	bic.w	r6, r6, #7
 80045de:	1d23      	adds	r3, r4, #4
 80045e0:	1af2      	subs	r2, r6, r3
 80045e2:	d0b6      	beq.n	8004552 <_malloc_r+0x22>
 80045e4:	1b9b      	subs	r3, r3, r6
 80045e6:	50a3      	str	r3, [r4, r2]
 80045e8:	e7b3      	b.n	8004552 <_malloc_r+0x22>
 80045ea:	6862      	ldr	r2, [r4, #4]
 80045ec:	42a3      	cmp	r3, r4
 80045ee:	bf0c      	ite	eq
 80045f0:	6032      	streq	r2, [r6, #0]
 80045f2:	605a      	strne	r2, [r3, #4]
 80045f4:	e7ec      	b.n	80045d0 <_malloc_r+0xa0>
 80045f6:	4623      	mov	r3, r4
 80045f8:	6864      	ldr	r4, [r4, #4]
 80045fa:	e7b2      	b.n	8004562 <_malloc_r+0x32>
 80045fc:	4634      	mov	r4, r6
 80045fe:	6876      	ldr	r6, [r6, #4]
 8004600:	e7b9      	b.n	8004576 <_malloc_r+0x46>
 8004602:	230c      	movs	r3, #12
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4638      	mov	r0, r7
 8004608:	f000 fd6a 	bl	80050e0 <__malloc_unlock>
 800460c:	e7a1      	b.n	8004552 <_malloc_r+0x22>
 800460e:	6025      	str	r5, [r4, #0]
 8004610:	e7de      	b.n	80045d0 <_malloc_r+0xa0>
 8004612:	bf00      	nop
 8004614:	20000804 	.word	0x20000804

08004618 <__sfputc_r>:
 8004618:	6893      	ldr	r3, [r2, #8]
 800461a:	3b01      	subs	r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	b410      	push	{r4}
 8004620:	6093      	str	r3, [r2, #8]
 8004622:	da08      	bge.n	8004636 <__sfputc_r+0x1e>
 8004624:	6994      	ldr	r4, [r2, #24]
 8004626:	42a3      	cmp	r3, r4
 8004628:	db01      	blt.n	800462e <__sfputc_r+0x16>
 800462a:	290a      	cmp	r1, #10
 800462c:	d103      	bne.n	8004636 <__sfputc_r+0x1e>
 800462e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004632:	f000 bb33 	b.w	8004c9c <__swbuf_r>
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	1c58      	adds	r0, r3, #1
 800463a:	6010      	str	r0, [r2, #0]
 800463c:	7019      	strb	r1, [r3, #0]
 800463e:	4608      	mov	r0, r1
 8004640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004644:	4770      	bx	lr

08004646 <__sfputs_r>:
 8004646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004648:	4606      	mov	r6, r0
 800464a:	460f      	mov	r7, r1
 800464c:	4614      	mov	r4, r2
 800464e:	18d5      	adds	r5, r2, r3
 8004650:	42ac      	cmp	r4, r5
 8004652:	d101      	bne.n	8004658 <__sfputs_r+0x12>
 8004654:	2000      	movs	r0, #0
 8004656:	e007      	b.n	8004668 <__sfputs_r+0x22>
 8004658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800465c:	463a      	mov	r2, r7
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff ffda 	bl	8004618 <__sfputc_r>
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	d1f3      	bne.n	8004650 <__sfputs_r+0xa>
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800466c <_vfiprintf_r>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	460d      	mov	r5, r1
 8004672:	b09d      	sub	sp, #116	; 0x74
 8004674:	4614      	mov	r4, r2
 8004676:	4698      	mov	r8, r3
 8004678:	4606      	mov	r6, r0
 800467a:	b118      	cbz	r0, 8004684 <_vfiprintf_r+0x18>
 800467c:	6983      	ldr	r3, [r0, #24]
 800467e:	b90b      	cbnz	r3, 8004684 <_vfiprintf_r+0x18>
 8004680:	f7ff fe96 	bl	80043b0 <__sinit>
 8004684:	4b89      	ldr	r3, [pc, #548]	; (80048ac <_vfiprintf_r+0x240>)
 8004686:	429d      	cmp	r5, r3
 8004688:	d11b      	bne.n	80046c2 <_vfiprintf_r+0x56>
 800468a:	6875      	ldr	r5, [r6, #4]
 800468c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	d405      	bmi.n	800469e <_vfiprintf_r+0x32>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	059a      	lsls	r2, r3, #22
 8004696:	d402      	bmi.n	800469e <_vfiprintf_r+0x32>
 8004698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469a:	f7ff ff27 	bl	80044ec <__retarget_lock_acquire_recursive>
 800469e:	89ab      	ldrh	r3, [r5, #12]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	d501      	bpl.n	80046a8 <_vfiprintf_r+0x3c>
 80046a4:	692b      	ldr	r3, [r5, #16]
 80046a6:	b9eb      	cbnz	r3, 80046e4 <_vfiprintf_r+0x78>
 80046a8:	4629      	mov	r1, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	f000 fb5a 	bl	8004d64 <__swsetup_r>
 80046b0:	b1c0      	cbz	r0, 80046e4 <_vfiprintf_r+0x78>
 80046b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046b4:	07dc      	lsls	r4, r3, #31
 80046b6:	d50e      	bpl.n	80046d6 <_vfiprintf_r+0x6a>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046bc:	b01d      	add	sp, #116	; 0x74
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c2:	4b7b      	ldr	r3, [pc, #492]	; (80048b0 <_vfiprintf_r+0x244>)
 80046c4:	429d      	cmp	r5, r3
 80046c6:	d101      	bne.n	80046cc <_vfiprintf_r+0x60>
 80046c8:	68b5      	ldr	r5, [r6, #8]
 80046ca:	e7df      	b.n	800468c <_vfiprintf_r+0x20>
 80046cc:	4b79      	ldr	r3, [pc, #484]	; (80048b4 <_vfiprintf_r+0x248>)
 80046ce:	429d      	cmp	r5, r3
 80046d0:	bf08      	it	eq
 80046d2:	68f5      	ldreq	r5, [r6, #12]
 80046d4:	e7da      	b.n	800468c <_vfiprintf_r+0x20>
 80046d6:	89ab      	ldrh	r3, [r5, #12]
 80046d8:	0598      	lsls	r0, r3, #22
 80046da:	d4ed      	bmi.n	80046b8 <_vfiprintf_r+0x4c>
 80046dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046de:	f7ff ff06 	bl	80044ee <__retarget_lock_release_recursive>
 80046e2:	e7e9      	b.n	80046b8 <_vfiprintf_r+0x4c>
 80046e4:	2300      	movs	r3, #0
 80046e6:	9309      	str	r3, [sp, #36]	; 0x24
 80046e8:	2320      	movs	r3, #32
 80046ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f2:	2330      	movs	r3, #48	; 0x30
 80046f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048b8 <_vfiprintf_r+0x24c>
 80046f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046fc:	f04f 0901 	mov.w	r9, #1
 8004700:	4623      	mov	r3, r4
 8004702:	469a      	mov	sl, r3
 8004704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004708:	b10a      	cbz	r2, 800470e <_vfiprintf_r+0xa2>
 800470a:	2a25      	cmp	r2, #37	; 0x25
 800470c:	d1f9      	bne.n	8004702 <_vfiprintf_r+0x96>
 800470e:	ebba 0b04 	subs.w	fp, sl, r4
 8004712:	d00b      	beq.n	800472c <_vfiprintf_r+0xc0>
 8004714:	465b      	mov	r3, fp
 8004716:	4622      	mov	r2, r4
 8004718:	4629      	mov	r1, r5
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff ff93 	bl	8004646 <__sfputs_r>
 8004720:	3001      	adds	r0, #1
 8004722:	f000 80aa 	beq.w	800487a <_vfiprintf_r+0x20e>
 8004726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004728:	445a      	add	r2, fp
 800472a:	9209      	str	r2, [sp, #36]	; 0x24
 800472c:	f89a 3000 	ldrb.w	r3, [sl]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80a2 	beq.w	800487a <_vfiprintf_r+0x20e>
 8004736:	2300      	movs	r3, #0
 8004738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800473c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004740:	f10a 0a01 	add.w	sl, sl, #1
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800474c:	931a      	str	r3, [sp, #104]	; 0x68
 800474e:	4654      	mov	r4, sl
 8004750:	2205      	movs	r2, #5
 8004752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004756:	4858      	ldr	r0, [pc, #352]	; (80048b8 <_vfiprintf_r+0x24c>)
 8004758:	f7fb fd4a 	bl	80001f0 <memchr>
 800475c:	9a04      	ldr	r2, [sp, #16]
 800475e:	b9d8      	cbnz	r0, 8004798 <_vfiprintf_r+0x12c>
 8004760:	06d1      	lsls	r1, r2, #27
 8004762:	bf44      	itt	mi
 8004764:	2320      	movmi	r3, #32
 8004766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800476a:	0713      	lsls	r3, r2, #28
 800476c:	bf44      	itt	mi
 800476e:	232b      	movmi	r3, #43	; 0x2b
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004774:	f89a 3000 	ldrb.w	r3, [sl]
 8004778:	2b2a      	cmp	r3, #42	; 0x2a
 800477a:	d015      	beq.n	80047a8 <_vfiprintf_r+0x13c>
 800477c:	9a07      	ldr	r2, [sp, #28]
 800477e:	4654      	mov	r4, sl
 8004780:	2000      	movs	r0, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	4621      	mov	r1, r4
 8004788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478c:	3b30      	subs	r3, #48	; 0x30
 800478e:	2b09      	cmp	r3, #9
 8004790:	d94e      	bls.n	8004830 <_vfiprintf_r+0x1c4>
 8004792:	b1b0      	cbz	r0, 80047c2 <_vfiprintf_r+0x156>
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	e014      	b.n	80047c2 <_vfiprintf_r+0x156>
 8004798:	eba0 0308 	sub.w	r3, r0, r8
 800479c:	fa09 f303 	lsl.w	r3, r9, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	46a2      	mov	sl, r4
 80047a6:	e7d2      	b.n	800474e <_vfiprintf_r+0xe2>
 80047a8:	9b03      	ldr	r3, [sp, #12]
 80047aa:	1d19      	adds	r1, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	9103      	str	r1, [sp, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfbb      	ittet	lt
 80047b4:	425b      	neglt	r3, r3
 80047b6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ba:	9307      	strge	r3, [sp, #28]
 80047bc:	9307      	strlt	r3, [sp, #28]
 80047be:	bfb8      	it	lt
 80047c0:	9204      	strlt	r2, [sp, #16]
 80047c2:	7823      	ldrb	r3, [r4, #0]
 80047c4:	2b2e      	cmp	r3, #46	; 0x2e
 80047c6:	d10c      	bne.n	80047e2 <_vfiprintf_r+0x176>
 80047c8:	7863      	ldrb	r3, [r4, #1]
 80047ca:	2b2a      	cmp	r3, #42	; 0x2a
 80047cc:	d135      	bne.n	800483a <_vfiprintf_r+0x1ce>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d1a      	adds	r2, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfb8      	it	lt
 80047da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047de:	3402      	adds	r4, #2
 80047e0:	9305      	str	r3, [sp, #20]
 80047e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048c8 <_vfiprintf_r+0x25c>
 80047e6:	7821      	ldrb	r1, [r4, #0]
 80047e8:	2203      	movs	r2, #3
 80047ea:	4650      	mov	r0, sl
 80047ec:	f7fb fd00 	bl	80001f0 <memchr>
 80047f0:	b140      	cbz	r0, 8004804 <_vfiprintf_r+0x198>
 80047f2:	2340      	movs	r3, #64	; 0x40
 80047f4:	eba0 000a 	sub.w	r0, r0, sl
 80047f8:	fa03 f000 	lsl.w	r0, r3, r0
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	4303      	orrs	r3, r0
 8004800:	3401      	adds	r4, #1
 8004802:	9304      	str	r3, [sp, #16]
 8004804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004808:	482c      	ldr	r0, [pc, #176]	; (80048bc <_vfiprintf_r+0x250>)
 800480a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800480e:	2206      	movs	r2, #6
 8004810:	f7fb fcee 	bl	80001f0 <memchr>
 8004814:	2800      	cmp	r0, #0
 8004816:	d03f      	beq.n	8004898 <_vfiprintf_r+0x22c>
 8004818:	4b29      	ldr	r3, [pc, #164]	; (80048c0 <_vfiprintf_r+0x254>)
 800481a:	bb1b      	cbnz	r3, 8004864 <_vfiprintf_r+0x1f8>
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	3307      	adds	r3, #7
 8004820:	f023 0307 	bic.w	r3, r3, #7
 8004824:	3308      	adds	r3, #8
 8004826:	9303      	str	r3, [sp, #12]
 8004828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482a:	443b      	add	r3, r7
 800482c:	9309      	str	r3, [sp, #36]	; 0x24
 800482e:	e767      	b.n	8004700 <_vfiprintf_r+0x94>
 8004830:	fb0c 3202 	mla	r2, ip, r2, r3
 8004834:	460c      	mov	r4, r1
 8004836:	2001      	movs	r0, #1
 8004838:	e7a5      	b.n	8004786 <_vfiprintf_r+0x11a>
 800483a:	2300      	movs	r3, #0
 800483c:	3401      	adds	r4, #1
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	4619      	mov	r1, r3
 8004842:	f04f 0c0a 	mov.w	ip, #10
 8004846:	4620      	mov	r0, r4
 8004848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800484c:	3a30      	subs	r2, #48	; 0x30
 800484e:	2a09      	cmp	r2, #9
 8004850:	d903      	bls.n	800485a <_vfiprintf_r+0x1ee>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0c5      	beq.n	80047e2 <_vfiprintf_r+0x176>
 8004856:	9105      	str	r1, [sp, #20]
 8004858:	e7c3      	b.n	80047e2 <_vfiprintf_r+0x176>
 800485a:	fb0c 2101 	mla	r1, ip, r1, r2
 800485e:	4604      	mov	r4, r0
 8004860:	2301      	movs	r3, #1
 8004862:	e7f0      	b.n	8004846 <_vfiprintf_r+0x1da>
 8004864:	ab03      	add	r3, sp, #12
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	462a      	mov	r2, r5
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <_vfiprintf_r+0x258>)
 800486c:	a904      	add	r1, sp, #16
 800486e:	4630      	mov	r0, r6
 8004870:	f3af 8000 	nop.w
 8004874:	4607      	mov	r7, r0
 8004876:	1c78      	adds	r0, r7, #1
 8004878:	d1d6      	bne.n	8004828 <_vfiprintf_r+0x1bc>
 800487a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800487c:	07d9      	lsls	r1, r3, #31
 800487e:	d405      	bmi.n	800488c <_vfiprintf_r+0x220>
 8004880:	89ab      	ldrh	r3, [r5, #12]
 8004882:	059a      	lsls	r2, r3, #22
 8004884:	d402      	bmi.n	800488c <_vfiprintf_r+0x220>
 8004886:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004888:	f7ff fe31 	bl	80044ee <__retarget_lock_release_recursive>
 800488c:	89ab      	ldrh	r3, [r5, #12]
 800488e:	065b      	lsls	r3, r3, #25
 8004890:	f53f af12 	bmi.w	80046b8 <_vfiprintf_r+0x4c>
 8004894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004896:	e711      	b.n	80046bc <_vfiprintf_r+0x50>
 8004898:	ab03      	add	r3, sp, #12
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	462a      	mov	r2, r5
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <_vfiprintf_r+0x258>)
 80048a0:	a904      	add	r1, sp, #16
 80048a2:	4630      	mov	r0, r6
 80048a4:	f000 f880 	bl	80049a8 <_printf_i>
 80048a8:	e7e4      	b.n	8004874 <_vfiprintf_r+0x208>
 80048aa:	bf00      	nop
 80048ac:	08005354 	.word	0x08005354
 80048b0:	08005374 	.word	0x08005374
 80048b4:	08005334 	.word	0x08005334
 80048b8:	08005394 	.word	0x08005394
 80048bc:	0800539e 	.word	0x0800539e
 80048c0:	00000000 	.word	0x00000000
 80048c4:	08004647 	.word	0x08004647
 80048c8:	0800539a 	.word	0x0800539a

080048cc <_printf_common>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	4616      	mov	r6, r2
 80048d2:	4699      	mov	r9, r3
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfb8      	it	lt
 80048e0:	4613      	movlt	r3, r2
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048e8:	4607      	mov	r7, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b10a      	cbz	r2, 80048f2 <_printf_common+0x26>
 80048ee:	3301      	adds	r3, #1
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	6833      	ldrmi	r3, [r6, #0]
 80048fa:	3302      	addmi	r3, #2
 80048fc:	6033      	strmi	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d106      	bne.n	8004914 <_printf_common+0x48>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	6832      	ldr	r2, [r6, #0]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	42ab      	cmp	r3, r5
 8004912:	dc26      	bgt.n	8004962 <_printf_common+0x96>
 8004914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004918:	1e13      	subs	r3, r2, #0
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	bf18      	it	ne
 800491e:	2301      	movne	r3, #1
 8004920:	0692      	lsls	r2, r2, #26
 8004922:	d42b      	bmi.n	800497c <_printf_common+0xb0>
 8004924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004928:	4649      	mov	r1, r9
 800492a:	4638      	mov	r0, r7
 800492c:	47c0      	blx	r8
 800492e:	3001      	adds	r0, #1
 8004930:	d01e      	beq.n	8004970 <_printf_common+0xa4>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	68e5      	ldr	r5, [r4, #12]
 8004936:	6832      	ldr	r2, [r6, #0]
 8004938:	f003 0306 	and.w	r3, r3, #6
 800493c:	2b04      	cmp	r3, #4
 800493e:	bf08      	it	eq
 8004940:	1aad      	subeq	r5, r5, r2
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	bf0c      	ite	eq
 8004948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800494c:	2500      	movne	r5, #0
 800494e:	4293      	cmp	r3, r2
 8004950:	bfc4      	itt	gt
 8004952:	1a9b      	subgt	r3, r3, r2
 8004954:	18ed      	addgt	r5, r5, r3
 8004956:	2600      	movs	r6, #0
 8004958:	341a      	adds	r4, #26
 800495a:	42b5      	cmp	r5, r6
 800495c:	d11a      	bne.n	8004994 <_printf_common+0xc8>
 800495e:	2000      	movs	r0, #0
 8004960:	e008      	b.n	8004974 <_printf_common+0xa8>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4649      	mov	r1, r9
 8004968:	4638      	mov	r0, r7
 800496a:	47c0      	blx	r8
 800496c:	3001      	adds	r0, #1
 800496e:	d103      	bne.n	8004978 <_printf_common+0xac>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	3501      	adds	r5, #1
 800497a:	e7c6      	b.n	800490a <_printf_common+0x3e>
 800497c:	18e1      	adds	r1, r4, r3
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	2030      	movs	r0, #48	; 0x30
 8004982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004986:	4422      	add	r2, r4
 8004988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800498c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004990:	3302      	adds	r3, #2
 8004992:	e7c7      	b.n	8004924 <_printf_common+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	4622      	mov	r2, r4
 8004998:	4649      	mov	r1, r9
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa4>
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7d9      	b.n	800495a <_printf_common+0x8e>
	...

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049b0:	2f78      	cmp	r7, #120	; 0x78
 80049b2:	4691      	mov	r9, r2
 80049b4:	4680      	mov	r8, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	469a      	mov	sl, r3
 80049ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	; 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d8 	beq.w	8004b7a <_printf_i+0x1d2>
 80049ca:	2f58      	cmp	r7, #88	; 0x58
 80049cc:	f000 80a3 	beq.w	8004b16 <_printf_i+0x16e>
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	; (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b61 	.word	0x08004b61
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004b43 	.word	0x08004b43
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b83 	.word	0x08004b83
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b4b 	.word	0x08004b4b
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a3      	b.n	8004b9c <_printf_i+0x1f4>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	6829      	ldr	r1, [r5, #0]
 8004a58:	0606      	lsls	r6, r0, #24
 8004a5a:	f101 0304 	add.w	r3, r1, #4
 8004a5e:	d50a      	bpl.n	8004a76 <_printf_i+0xce>
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	da03      	bge.n	8004a70 <_printf_i+0xc8>
 8004a68:	232d      	movs	r3, #45	; 0x2d
 8004a6a:	4276      	negs	r6, r6
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	485e      	ldr	r0, [pc, #376]	; (8004bec <_printf_i+0x244>)
 8004a72:	230a      	movs	r3, #10
 8004a74:	e019      	b.n	8004aaa <_printf_i+0x102>
 8004a76:	680e      	ldr	r6, [r1, #0]
 8004a78:	602b      	str	r3, [r5, #0]
 8004a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a7e:	bf18      	it	ne
 8004a80:	b236      	sxthne	r6, r6
 8004a82:	e7ef      	b.n	8004a64 <_printf_i+0xbc>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	6820      	ldr	r0, [r4, #0]
 8004a88:	1d19      	adds	r1, r3, #4
 8004a8a:	6029      	str	r1, [r5, #0]
 8004a8c:	0601      	lsls	r1, r0, #24
 8004a8e:	d501      	bpl.n	8004a94 <_printf_i+0xec>
 8004a90:	681e      	ldr	r6, [r3, #0]
 8004a92:	e002      	b.n	8004a9a <_printf_i+0xf2>
 8004a94:	0646      	lsls	r6, r0, #25
 8004a96:	d5fb      	bpl.n	8004a90 <_printf_i+0xe8>
 8004a98:	881e      	ldrh	r6, [r3, #0]
 8004a9a:	4854      	ldr	r0, [pc, #336]	; (8004bec <_printf_i+0x244>)
 8004a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2308      	moveq	r3, #8
 8004aa2:	230a      	movne	r3, #10
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aaa:	6865      	ldr	r5, [r4, #4]
 8004aac:	60a5      	str	r5, [r4, #8]
 8004aae:	2d00      	cmp	r5, #0
 8004ab0:	bfa2      	ittt	ge
 8004ab2:	6821      	ldrge	r1, [r4, #0]
 8004ab4:	f021 0104 	bicge.w	r1, r1, #4
 8004ab8:	6021      	strge	r1, [r4, #0]
 8004aba:	b90e      	cbnz	r6, 8004ac0 <_printf_i+0x118>
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	d04d      	beq.n	8004b5c <_printf_i+0x1b4>
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8004aca:	5dc7      	ldrb	r7, [r0, r7]
 8004acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ad0:	4637      	mov	r7, r6
 8004ad2:	42bb      	cmp	r3, r7
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	d9f4      	bls.n	8004ac2 <_printf_i+0x11a>
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d10b      	bne.n	8004af4 <_printf_i+0x14c>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07de      	lsls	r6, r3, #31
 8004ae0:	d508      	bpl.n	8004af4 <_printf_i+0x14c>
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6861      	ldr	r1, [r4, #4]
 8004ae6:	4299      	cmp	r1, r3
 8004ae8:	bfde      	ittt	le
 8004aea:	2330      	movle	r3, #48	; 0x30
 8004aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004af0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004af4:	1b52      	subs	r2, r2, r5
 8004af6:	6122      	str	r2, [r4, #16]
 8004af8:	f8cd a000 	str.w	sl, [sp]
 8004afc:	464b      	mov	r3, r9
 8004afe:	aa03      	add	r2, sp, #12
 8004b00:	4621      	mov	r1, r4
 8004b02:	4640      	mov	r0, r8
 8004b04:	f7ff fee2 	bl	80048cc <_printf_common>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d14c      	bne.n	8004ba6 <_printf_i+0x1fe>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b10:	b004      	add	sp, #16
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b16:	4835      	ldr	r0, [pc, #212]	; (8004bec <_printf_i+0x244>)
 8004b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b1c:	6829      	ldr	r1, [r5, #0]
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b24:	6029      	str	r1, [r5, #0]
 8004b26:	061d      	lsls	r5, r3, #24
 8004b28:	d514      	bpl.n	8004b54 <_printf_i+0x1ac>
 8004b2a:	07df      	lsls	r7, r3, #31
 8004b2c:	bf44      	itt	mi
 8004b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b32:	6023      	strmi	r3, [r4, #0]
 8004b34:	b91e      	cbnz	r6, 8004b3e <_printf_i+0x196>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f023 0320 	bic.w	r3, r3, #32
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	2310      	movs	r3, #16
 8004b40:	e7b0      	b.n	8004aa4 <_printf_i+0xfc>
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	f043 0320 	orr.w	r3, r3, #32
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	2378      	movs	r3, #120	; 0x78
 8004b4c:	4828      	ldr	r0, [pc, #160]	; (8004bf0 <_printf_i+0x248>)
 8004b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b52:	e7e3      	b.n	8004b1c <_printf_i+0x174>
 8004b54:	0659      	lsls	r1, r3, #25
 8004b56:	bf48      	it	mi
 8004b58:	b2b6      	uxthmi	r6, r6
 8004b5a:	e7e6      	b.n	8004b2a <_printf_i+0x182>
 8004b5c:	4615      	mov	r5, r2
 8004b5e:	e7bb      	b.n	8004ad8 <_printf_i+0x130>
 8004b60:	682b      	ldr	r3, [r5, #0]
 8004b62:	6826      	ldr	r6, [r4, #0]
 8004b64:	6961      	ldr	r1, [r4, #20]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6028      	str	r0, [r5, #0]
 8004b6a:	0635      	lsls	r5, r6, #24
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	d501      	bpl.n	8004b74 <_printf_i+0x1cc>
 8004b70:	6019      	str	r1, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <_printf_i+0x1d2>
 8004b74:	0670      	lsls	r0, r6, #25
 8004b76:	d5fb      	bpl.n	8004b70 <_printf_i+0x1c8>
 8004b78:	8019      	strh	r1, [r3, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	4615      	mov	r5, r2
 8004b80:	e7ba      	b.n	8004af8 <_printf_i+0x150>
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	1d1a      	adds	r2, r3, #4
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	681d      	ldr	r5, [r3, #0]
 8004b8a:	6862      	ldr	r2, [r4, #4]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f7fb fb2e 	bl	80001f0 <memchr>
 8004b94:	b108      	cbz	r0, 8004b9a <_printf_i+0x1f2>
 8004b96:	1b40      	subs	r0, r0, r5
 8004b98:	6060      	str	r0, [r4, #4]
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba4:	e7a8      	b.n	8004af8 <_printf_i+0x150>
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	462a      	mov	r2, r5
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	47d0      	blx	sl
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d0ab      	beq.n	8004b0c <_printf_i+0x164>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	079b      	lsls	r3, r3, #30
 8004bb8:	d413      	bmi.n	8004be2 <_printf_i+0x23a>
 8004bba:	68e0      	ldr	r0, [r4, #12]
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	4298      	cmp	r0, r3
 8004bc0:	bfb8      	it	lt
 8004bc2:	4618      	movlt	r0, r3
 8004bc4:	e7a4      	b.n	8004b10 <_printf_i+0x168>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4632      	mov	r2, r6
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	47d0      	blx	sl
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d09b      	beq.n	8004b0c <_printf_i+0x164>
 8004bd4:	3501      	adds	r5, #1
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	9903      	ldr	r1, [sp, #12]
 8004bda:	1a5b      	subs	r3, r3, r1
 8004bdc:	42ab      	cmp	r3, r5
 8004bde:	dcf2      	bgt.n	8004bc6 <_printf_i+0x21e>
 8004be0:	e7eb      	b.n	8004bba <_printf_i+0x212>
 8004be2:	2500      	movs	r5, #0
 8004be4:	f104 0619 	add.w	r6, r4, #25
 8004be8:	e7f5      	b.n	8004bd6 <_printf_i+0x22e>
 8004bea:	bf00      	nop
 8004bec:	080053a5 	.word	0x080053a5
 8004bf0:	080053b6 	.word	0x080053b6

08004bf4 <_sbrk_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d06      	ldr	r5, [pc, #24]	; (8004c10 <_sbrk_r+0x1c>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc face 	bl	80011a0 <_sbrk>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_sbrk_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_sbrk_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	2000080c 	.word	0x2000080c

08004c14 <__sread>:
 8004c14:	b510      	push	{r4, lr}
 8004c16:	460c      	mov	r4, r1
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	f000 fab2 	bl	8005184 <_read_r>
 8004c20:	2800      	cmp	r0, #0
 8004c22:	bfab      	itete	ge
 8004c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c26:	89a3      	ldrhlt	r3, [r4, #12]
 8004c28:	181b      	addge	r3, r3, r0
 8004c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c2e:	bfac      	ite	ge
 8004c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c32:	81a3      	strhlt	r3, [r4, #12]
 8004c34:	bd10      	pop	{r4, pc}

08004c36 <__swrite>:
 8004c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	898b      	ldrh	r3, [r1, #12]
 8004c3e:	05db      	lsls	r3, r3, #23
 8004c40:	4605      	mov	r5, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4616      	mov	r6, r2
 8004c46:	d505      	bpl.n	8004c54 <__swrite+0x1e>
 8004c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f000 f9c8 	bl	8004fe4 <_lseek_r>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	4632      	mov	r2, r6
 8004c62:	463b      	mov	r3, r7
 8004c64:	4628      	mov	r0, r5
 8004c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6a:	f000 b869 	b.w	8004d40 <_write_r>

08004c6e <__sseek>:
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	460c      	mov	r4, r1
 8004c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c76:	f000 f9b5 	bl	8004fe4 <_lseek_r>
 8004c7a:	1c43      	adds	r3, r0, #1
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	bf15      	itete	ne
 8004c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c8a:	81a3      	strheq	r3, [r4, #12]
 8004c8c:	bf18      	it	ne
 8004c8e:	81a3      	strhne	r3, [r4, #12]
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <__sclose>:
 8004c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c96:	f000 b8d3 	b.w	8004e40 <_close_r>
	...

08004c9c <__swbuf_r>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	460e      	mov	r6, r1
 8004ca0:	4614      	mov	r4, r2
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	b118      	cbz	r0, 8004cae <__swbuf_r+0x12>
 8004ca6:	6983      	ldr	r3, [r0, #24]
 8004ca8:	b90b      	cbnz	r3, 8004cae <__swbuf_r+0x12>
 8004caa:	f7ff fb81 	bl	80043b0 <__sinit>
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <__swbuf_r+0x98>)
 8004cb0:	429c      	cmp	r4, r3
 8004cb2:	d12b      	bne.n	8004d0c <__swbuf_r+0x70>
 8004cb4:	686c      	ldr	r4, [r5, #4]
 8004cb6:	69a3      	ldr	r3, [r4, #24]
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	071a      	lsls	r2, r3, #28
 8004cbe:	d52f      	bpl.n	8004d20 <__swbuf_r+0x84>
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	b36b      	cbz	r3, 8004d20 <__swbuf_r+0x84>
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1ac0      	subs	r0, r0, r3
 8004cca:	6963      	ldr	r3, [r4, #20]
 8004ccc:	b2f6      	uxtb	r6, r6
 8004cce:	4283      	cmp	r3, r0
 8004cd0:	4637      	mov	r7, r6
 8004cd2:	dc04      	bgt.n	8004cde <__swbuf_r+0x42>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f948 	bl	8004f6c <_fflush_r>
 8004cdc:	bb30      	cbnz	r0, 8004d2c <__swbuf_r+0x90>
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	60a3      	str	r3, [r4, #8]
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	701e      	strb	r6, [r3, #0]
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	3001      	adds	r0, #1
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	d004      	beq.n	8004cfe <__swbuf_r+0x62>
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	07db      	lsls	r3, r3, #31
 8004cf8:	d506      	bpl.n	8004d08 <__swbuf_r+0x6c>
 8004cfa:	2e0a      	cmp	r6, #10
 8004cfc:	d104      	bne.n	8004d08 <__swbuf_r+0x6c>
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 f933 	bl	8004f6c <_fflush_r>
 8004d06:	b988      	cbnz	r0, 8004d2c <__swbuf_r+0x90>
 8004d08:	4638      	mov	r0, r7
 8004d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <__swbuf_r+0x9c>)
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d101      	bne.n	8004d16 <__swbuf_r+0x7a>
 8004d12:	68ac      	ldr	r4, [r5, #8]
 8004d14:	e7cf      	b.n	8004cb6 <__swbuf_r+0x1a>
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <__swbuf_r+0xa0>)
 8004d18:	429c      	cmp	r4, r3
 8004d1a:	bf08      	it	eq
 8004d1c:	68ec      	ldreq	r4, [r5, #12]
 8004d1e:	e7ca      	b.n	8004cb6 <__swbuf_r+0x1a>
 8004d20:	4621      	mov	r1, r4
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 f81e 	bl	8004d64 <__swsetup_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0cb      	beq.n	8004cc4 <__swbuf_r+0x28>
 8004d2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d30:	e7ea      	b.n	8004d08 <__swbuf_r+0x6c>
 8004d32:	bf00      	nop
 8004d34:	08005354 	.word	0x08005354
 8004d38:	08005374 	.word	0x08005374
 8004d3c:	08005334 	.word	0x08005334

08004d40 <_write_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_write_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc f9d5 	bl	80010fe <_write>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_write_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_write_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	2000080c 	.word	0x2000080c

08004d64 <__swsetup_r>:
 8004d64:	4b32      	ldr	r3, [pc, #200]	; (8004e30 <__swsetup_r+0xcc>)
 8004d66:	b570      	push	{r4, r5, r6, lr}
 8004d68:	681d      	ldr	r5, [r3, #0]
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	b125      	cbz	r5, 8004d7a <__swsetup_r+0x16>
 8004d70:	69ab      	ldr	r3, [r5, #24]
 8004d72:	b913      	cbnz	r3, 8004d7a <__swsetup_r+0x16>
 8004d74:	4628      	mov	r0, r5
 8004d76:	f7ff fb1b 	bl	80043b0 <__sinit>
 8004d7a:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <__swsetup_r+0xd0>)
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	d10f      	bne.n	8004da0 <__swsetup_r+0x3c>
 8004d80:	686c      	ldr	r4, [r5, #4]
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d88:	0719      	lsls	r1, r3, #28
 8004d8a:	d42c      	bmi.n	8004de6 <__swsetup_r+0x82>
 8004d8c:	06dd      	lsls	r5, r3, #27
 8004d8e:	d411      	bmi.n	8004db4 <__swsetup_r+0x50>
 8004d90:	2309      	movs	r3, #9
 8004d92:	6033      	str	r3, [r6, #0]
 8004d94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d98:	81a3      	strh	r3, [r4, #12]
 8004d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d9e:	e03e      	b.n	8004e1e <__swsetup_r+0xba>
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <__swsetup_r+0xd4>)
 8004da2:	429c      	cmp	r4, r3
 8004da4:	d101      	bne.n	8004daa <__swsetup_r+0x46>
 8004da6:	68ac      	ldr	r4, [r5, #8]
 8004da8:	e7eb      	b.n	8004d82 <__swsetup_r+0x1e>
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <__swsetup_r+0xd8>)
 8004dac:	429c      	cmp	r4, r3
 8004dae:	bf08      	it	eq
 8004db0:	68ec      	ldreq	r4, [r5, #12]
 8004db2:	e7e6      	b.n	8004d82 <__swsetup_r+0x1e>
 8004db4:	0758      	lsls	r0, r3, #29
 8004db6:	d512      	bpl.n	8004dde <__swsetup_r+0x7a>
 8004db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dba:	b141      	cbz	r1, 8004dce <__swsetup_r+0x6a>
 8004dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc0:	4299      	cmp	r1, r3
 8004dc2:	d002      	beq.n	8004dca <__swsetup_r+0x66>
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f991 	bl	80050ec <_free_r>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	6923      	ldr	r3, [r4, #16]
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f043 0308 	orr.w	r3, r3, #8
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	6923      	ldr	r3, [r4, #16]
 8004de8:	b94b      	cbnz	r3, 8004dfe <__swsetup_r+0x9a>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d003      	beq.n	8004dfe <__swsetup_r+0x9a>
 8004df6:	4621      	mov	r1, r4
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f92b 	bl	8005054 <__smakebuf_r>
 8004dfe:	89a0      	ldrh	r0, [r4, #12]
 8004e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e04:	f010 0301 	ands.w	r3, r0, #1
 8004e08:	d00a      	beq.n	8004e20 <__swsetup_r+0xbc>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	6963      	ldr	r3, [r4, #20]
 8004e10:	425b      	negs	r3, r3
 8004e12:	61a3      	str	r3, [r4, #24]
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	b943      	cbnz	r3, 8004e2a <__swsetup_r+0xc6>
 8004e18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e1c:	d1ba      	bne.n	8004d94 <__swsetup_r+0x30>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	0781      	lsls	r1, r0, #30
 8004e22:	bf58      	it	pl
 8004e24:	6963      	ldrpl	r3, [r4, #20]
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	e7f4      	b.n	8004e14 <__swsetup_r+0xb0>
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	e7f7      	b.n	8004e1e <__swsetup_r+0xba>
 8004e2e:	bf00      	nop
 8004e30:	20000024 	.word	0x20000024
 8004e34:	08005354 	.word	0x08005354
 8004e38:	08005374 	.word	0x08005374
 8004e3c:	08005334 	.word	0x08005334

08004e40 <_close_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_close_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fc f973 	bl	8001136 <_close>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_close_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_close_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	2000080c 	.word	0x2000080c

08004e60 <__sflush_r>:
 8004e60:	898a      	ldrh	r2, [r1, #12]
 8004e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	0710      	lsls	r0, r2, #28
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	d458      	bmi.n	8004f20 <__sflush_r+0xc0>
 8004e6e:	684b      	ldr	r3, [r1, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dc05      	bgt.n	8004e80 <__sflush_r+0x20>
 8004e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc02      	bgt.n	8004e80 <__sflush_r+0x20>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d0f9      	beq.n	8004e7a <__sflush_r+0x1a>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e8c:	682f      	ldr	r7, [r5, #0]
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	d032      	beq.n	8004ef8 <__sflush_r+0x98>
 8004e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	075a      	lsls	r2, r3, #29
 8004e98:	d505      	bpl.n	8004ea6 <__sflush_r+0x46>
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ea0:	b10b      	cbz	r3, 8004ea6 <__sflush_r+0x46>
 8004ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea4:	1ac0      	subs	r0, r0, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eac:	6a21      	ldr	r1, [r4, #32]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	d106      	bne.n	8004ec6 <__sflush_r+0x66>
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	291d      	cmp	r1, #29
 8004ebc:	d82c      	bhi.n	8004f18 <__sflush_r+0xb8>
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <__sflush_r+0x108>)
 8004ec0:	40ca      	lsrs	r2, r1
 8004ec2:	07d6      	lsls	r6, r2, #31
 8004ec4:	d528      	bpl.n	8004f18 <__sflush_r+0xb8>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6062      	str	r2, [r4, #4]
 8004eca:	04d9      	lsls	r1, r3, #19
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	d504      	bpl.n	8004edc <__sflush_r+0x7c>
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	d101      	bne.n	8004eda <__sflush_r+0x7a>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b903      	cbnz	r3, 8004edc <__sflush_r+0x7c>
 8004eda:	6560      	str	r0, [r4, #84]	; 0x54
 8004edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d0ca      	beq.n	8004e7a <__sflush_r+0x1a>
 8004ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d002      	beq.n	8004ef2 <__sflush_r+0x92>
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 f8fd 	bl	80050ec <_free_r>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ef6:	e7c1      	b.n	8004e7c <__sflush_r+0x1c>
 8004ef8:	6a21      	ldr	r1, [r4, #32]
 8004efa:	2301      	movs	r3, #1
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b0      	blx	r6
 8004f00:	1c41      	adds	r1, r0, #1
 8004f02:	d1c7      	bne.n	8004e94 <__sflush_r+0x34>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c4      	beq.n	8004e94 <__sflush_r+0x34>
 8004f0a:	2b1d      	cmp	r3, #29
 8004f0c:	d001      	beq.n	8004f12 <__sflush_r+0xb2>
 8004f0e:	2b16      	cmp	r3, #22
 8004f10:	d101      	bne.n	8004f16 <__sflush_r+0xb6>
 8004f12:	602f      	str	r7, [r5, #0]
 8004f14:	e7b1      	b.n	8004e7a <__sflush_r+0x1a>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7ad      	b.n	8004e7c <__sflush_r+0x1c>
 8004f20:	690f      	ldr	r7, [r1, #16]
 8004f22:	2f00      	cmp	r7, #0
 8004f24:	d0a9      	beq.n	8004e7a <__sflush_r+0x1a>
 8004f26:	0793      	lsls	r3, r2, #30
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	bf08      	it	eq
 8004f2c:	694b      	ldreq	r3, [r1, #20]
 8004f2e:	600f      	str	r7, [r1, #0]
 8004f30:	bf18      	it	ne
 8004f32:	2300      	movne	r3, #0
 8004f34:	eba6 0807 	sub.w	r8, r6, r7
 8004f38:	608b      	str	r3, [r1, #8]
 8004f3a:	f1b8 0f00 	cmp.w	r8, #0
 8004f3e:	dd9c      	ble.n	8004e7a <__sflush_r+0x1a>
 8004f40:	6a21      	ldr	r1, [r4, #32]
 8004f42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f44:	4643      	mov	r3, r8
 8004f46:	463a      	mov	r2, r7
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b0      	blx	r6
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	dc06      	bgt.n	8004f5e <__sflush_r+0xfe>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f5c:	e78e      	b.n	8004e7c <__sflush_r+0x1c>
 8004f5e:	4407      	add	r7, r0
 8004f60:	eba8 0800 	sub.w	r8, r8, r0
 8004f64:	e7e9      	b.n	8004f3a <__sflush_r+0xda>
 8004f66:	bf00      	nop
 8004f68:	20400001 	.word	0x20400001

08004f6c <_fflush_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	b913      	cbnz	r3, 8004f7c <_fflush_r+0x10>
 8004f76:	2500      	movs	r5, #0
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	b118      	cbz	r0, 8004f86 <_fflush_r+0x1a>
 8004f7e:	6983      	ldr	r3, [r0, #24]
 8004f80:	b90b      	cbnz	r3, 8004f86 <_fflush_r+0x1a>
 8004f82:	f7ff fa15 	bl	80043b0 <__sinit>
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <_fflush_r+0x6c>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d11b      	bne.n	8004fc4 <_fflush_r+0x58>
 8004f8c:	686c      	ldr	r4, [r5, #4]
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ef      	beq.n	8004f76 <_fflush_r+0xa>
 8004f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f98:	07d0      	lsls	r0, r2, #31
 8004f9a:	d404      	bmi.n	8004fa6 <_fflush_r+0x3a>
 8004f9c:	0599      	lsls	r1, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_fflush_r+0x3a>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f7ff faa3 	bl	80044ec <__retarget_lock_acquire_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f7ff ff59 	bl	8004e60 <__sflush_r>
 8004fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	d4e0      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	d4dd      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fbe:	f7ff fa96 	bl	80044ee <__retarget_lock_release_recursive>
 8004fc2:	e7d9      	b.n	8004f78 <_fflush_r+0xc>
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <_fflush_r+0x70>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d101      	bne.n	8004fce <_fflush_r+0x62>
 8004fca:	68ac      	ldr	r4, [r5, #8]
 8004fcc:	e7df      	b.n	8004f8e <_fflush_r+0x22>
 8004fce:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <_fflush_r+0x74>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	bf08      	it	eq
 8004fd4:	68ec      	ldreq	r4, [r5, #12]
 8004fd6:	e7da      	b.n	8004f8e <_fflush_r+0x22>
 8004fd8:	08005354 	.word	0x08005354
 8004fdc:	08005374 	.word	0x08005374
 8004fe0:	08005334 	.word	0x08005334

08004fe4 <_lseek_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d07      	ldr	r5, [pc, #28]	; (8005004 <_lseek_r+0x20>)
 8004fe8:	4604      	mov	r4, r0
 8004fea:	4608      	mov	r0, r1
 8004fec:	4611      	mov	r1, r2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	602a      	str	r2, [r5, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f7fc f8c6 	bl	8001184 <_lseek>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_lseek_r+0x1e>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_lseek_r+0x1e>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	2000080c 	.word	0x2000080c

08005008 <__swhatbuf_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	460e      	mov	r6, r1
 800500c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005010:	2900      	cmp	r1, #0
 8005012:	b096      	sub	sp, #88	; 0x58
 8005014:	4614      	mov	r4, r2
 8005016:	461d      	mov	r5, r3
 8005018:	da08      	bge.n	800502c <__swhatbuf_r+0x24>
 800501a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	602a      	str	r2, [r5, #0]
 8005022:	061a      	lsls	r2, r3, #24
 8005024:	d410      	bmi.n	8005048 <__swhatbuf_r+0x40>
 8005026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502a:	e00e      	b.n	800504a <__swhatbuf_r+0x42>
 800502c:	466a      	mov	r2, sp
 800502e:	f000 f8bb 	bl	80051a8 <_fstat_r>
 8005032:	2800      	cmp	r0, #0
 8005034:	dbf1      	blt.n	800501a <__swhatbuf_r+0x12>
 8005036:	9a01      	ldr	r2, [sp, #4]
 8005038:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800503c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005040:	425a      	negs	r2, r3
 8005042:	415a      	adcs	r2, r3
 8005044:	602a      	str	r2, [r5, #0]
 8005046:	e7ee      	b.n	8005026 <__swhatbuf_r+0x1e>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	2000      	movs	r0, #0
 800504c:	6023      	str	r3, [r4, #0]
 800504e:	b016      	add	sp, #88	; 0x58
 8005050:	bd70      	pop	{r4, r5, r6, pc}
	...

08005054 <__smakebuf_r>:
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005058:	079d      	lsls	r5, r3, #30
 800505a:	4606      	mov	r6, r0
 800505c:	460c      	mov	r4, r1
 800505e:	d507      	bpl.n	8005070 <__smakebuf_r+0x1c>
 8005060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	6123      	str	r3, [r4, #16]
 8005068:	2301      	movs	r3, #1
 800506a:	6163      	str	r3, [r4, #20]
 800506c:	b002      	add	sp, #8
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	ab01      	add	r3, sp, #4
 8005072:	466a      	mov	r2, sp
 8005074:	f7ff ffc8 	bl	8005008 <__swhatbuf_r>
 8005078:	9900      	ldr	r1, [sp, #0]
 800507a:	4605      	mov	r5, r0
 800507c:	4630      	mov	r0, r6
 800507e:	f7ff fa57 	bl	8004530 <_malloc_r>
 8005082:	b948      	cbnz	r0, 8005098 <__smakebuf_r+0x44>
 8005084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005088:	059a      	lsls	r2, r3, #22
 800508a:	d4ef      	bmi.n	800506c <__smakebuf_r+0x18>
 800508c:	f023 0303 	bic.w	r3, r3, #3
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	e7e3      	b.n	8005060 <__smakebuf_r+0xc>
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <__smakebuf_r+0x7c>)
 800509a:	62b3      	str	r3, [r6, #40]	; 0x28
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	6020      	str	r0, [r4, #0]
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	81a3      	strh	r3, [r4, #12]
 80050a6:	9b00      	ldr	r3, [sp, #0]
 80050a8:	6163      	str	r3, [r4, #20]
 80050aa:	9b01      	ldr	r3, [sp, #4]
 80050ac:	6120      	str	r0, [r4, #16]
 80050ae:	b15b      	cbz	r3, 80050c8 <__smakebuf_r+0x74>
 80050b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 f889 	bl	80051cc <_isatty_r>
 80050ba:	b128      	cbz	r0, 80050c8 <__smakebuf_r+0x74>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	89a0      	ldrh	r0, [r4, #12]
 80050ca:	4305      	orrs	r5, r0
 80050cc:	81a5      	strh	r5, [r4, #12]
 80050ce:	e7cd      	b.n	800506c <__smakebuf_r+0x18>
 80050d0:	08004349 	.word	0x08004349

080050d4 <__malloc_lock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__malloc_lock+0x8>)
 80050d6:	f7ff ba09 	b.w	80044ec <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	20000800 	.word	0x20000800

080050e0 <__malloc_unlock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__malloc_unlock+0x8>)
 80050e2:	f7ff ba04 	b.w	80044ee <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	20000800 	.word	0x20000800

080050ec <_free_r>:
 80050ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d044      	beq.n	800517c <_free_r+0x90>
 80050f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f6:	9001      	str	r0, [sp, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f1a1 0404 	sub.w	r4, r1, #4
 80050fe:	bfb8      	it	lt
 8005100:	18e4      	addlt	r4, r4, r3
 8005102:	f7ff ffe7 	bl	80050d4 <__malloc_lock>
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <_free_r+0x94>)
 8005108:	9801      	ldr	r0, [sp, #4]
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	b933      	cbnz	r3, 800511c <_free_r+0x30>
 800510e:	6063      	str	r3, [r4, #4]
 8005110:	6014      	str	r4, [r2, #0]
 8005112:	b003      	add	sp, #12
 8005114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005118:	f7ff bfe2 	b.w	80050e0 <__malloc_unlock>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d908      	bls.n	8005132 <_free_r+0x46>
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1961      	adds	r1, r4, r5
 8005124:	428b      	cmp	r3, r1
 8005126:	bf01      	itttt	eq
 8005128:	6819      	ldreq	r1, [r3, #0]
 800512a:	685b      	ldreq	r3, [r3, #4]
 800512c:	1949      	addeq	r1, r1, r5
 800512e:	6021      	streq	r1, [r4, #0]
 8005130:	e7ed      	b.n	800510e <_free_r+0x22>
 8005132:	461a      	mov	r2, r3
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	b10b      	cbz	r3, 800513c <_free_r+0x50>
 8005138:	42a3      	cmp	r3, r4
 800513a:	d9fa      	bls.n	8005132 <_free_r+0x46>
 800513c:	6811      	ldr	r1, [r2, #0]
 800513e:	1855      	adds	r5, r2, r1
 8005140:	42a5      	cmp	r5, r4
 8005142:	d10b      	bne.n	800515c <_free_r+0x70>
 8005144:	6824      	ldr	r4, [r4, #0]
 8005146:	4421      	add	r1, r4
 8005148:	1854      	adds	r4, r2, r1
 800514a:	42a3      	cmp	r3, r4
 800514c:	6011      	str	r1, [r2, #0]
 800514e:	d1e0      	bne.n	8005112 <_free_r+0x26>
 8005150:	681c      	ldr	r4, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	6053      	str	r3, [r2, #4]
 8005156:	4421      	add	r1, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	e7da      	b.n	8005112 <_free_r+0x26>
 800515c:	d902      	bls.n	8005164 <_free_r+0x78>
 800515e:	230c      	movs	r3, #12
 8005160:	6003      	str	r3, [r0, #0]
 8005162:	e7d6      	b.n	8005112 <_free_r+0x26>
 8005164:	6825      	ldr	r5, [r4, #0]
 8005166:	1961      	adds	r1, r4, r5
 8005168:	428b      	cmp	r3, r1
 800516a:	bf04      	itt	eq
 800516c:	6819      	ldreq	r1, [r3, #0]
 800516e:	685b      	ldreq	r3, [r3, #4]
 8005170:	6063      	str	r3, [r4, #4]
 8005172:	bf04      	itt	eq
 8005174:	1949      	addeq	r1, r1, r5
 8005176:	6021      	streq	r1, [r4, #0]
 8005178:	6054      	str	r4, [r2, #4]
 800517a:	e7ca      	b.n	8005112 <_free_r+0x26>
 800517c:	b003      	add	sp, #12
 800517e:	bd30      	pop	{r4, r5, pc}
 8005180:	20000804 	.word	0x20000804

08005184 <_read_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d07      	ldr	r5, [pc, #28]	; (80051a4 <_read_r+0x20>)
 8005188:	4604      	mov	r4, r0
 800518a:	4608      	mov	r0, r1
 800518c:	4611      	mov	r1, r2
 800518e:	2200      	movs	r2, #0
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f7fb ff96 	bl	80010c4 <_read>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_read_r+0x1e>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_read_r+0x1e>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	2000080c 	.word	0x2000080c

080051a8 <_fstat_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4d07      	ldr	r5, [pc, #28]	; (80051c8 <_fstat_r+0x20>)
 80051ac:	2300      	movs	r3, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4608      	mov	r0, r1
 80051b2:	4611      	mov	r1, r2
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	f7fb ffca 	bl	800114e <_fstat>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	d102      	bne.n	80051c4 <_fstat_r+0x1c>
 80051be:	682b      	ldr	r3, [r5, #0]
 80051c0:	b103      	cbz	r3, 80051c4 <_fstat_r+0x1c>
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
 80051c6:	bf00      	nop
 80051c8:	2000080c 	.word	0x2000080c

080051cc <_isatty_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d06      	ldr	r5, [pc, #24]	; (80051e8 <_isatty_r+0x1c>)
 80051d0:	2300      	movs	r3, #0
 80051d2:	4604      	mov	r4, r0
 80051d4:	4608      	mov	r0, r1
 80051d6:	602b      	str	r3, [r5, #0]
 80051d8:	f7fb ffc9 	bl	800116e <_isatty>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d102      	bne.n	80051e6 <_isatty_r+0x1a>
 80051e0:	682b      	ldr	r3, [r5, #0]
 80051e2:	b103      	cbz	r3, 80051e6 <_isatty_r+0x1a>
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	bd38      	pop	{r3, r4, r5, pc}
 80051e8:	2000080c 	.word	0x2000080c

080051ec <_init>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	bf00      	nop
 80051f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f2:	bc08      	pop	{r3}
 80051f4:	469e      	mov	lr, r3
 80051f6:	4770      	bx	lr

080051f8 <_fini>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr
